/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as errors from "./models/errors";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Mobiledevicecommands {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Creates a new mobile device command
     *
     * @remarks
     * The chart below includes additional requirements for usage of specific commands
     *
     * | command | Parameters | Requirements | Values |
     * | ---------- | ------- | ------------ | ------ |
     * | DeviceName | device_name | Supervised Device | string |
     * | DeviceLocation | N/A | Supervised and in lost mode | N/A |
     * | DeviceLock | lock_message | optional | string |
     * | DisableLostMode | N/A | Supervised and in lost mode | N/A |
     * | EnableLostMode | lost_mode_message | Supervised device (required if lost_mode_phone is not set) | string |
     * | EnableLostMode | lost_mode_phone | Supervised device (required if lost_mode_message is not set) | string |
     * | EnableLostMode | lost_mode_footnote | optional | string |
     * | EnableLostMode | always_enforce_lost_mode | optional (defaults to 'true') | boolean |
     * | EnableLostMode | lost_mode_with_sound | optional (defaults to 'false') | boolean |
     * | EraseDevice | preserve_data_plan | optional (defaults to 'false') | boolean |
     * | EraseDevice | disallow_proximity_setup | optional (defaults to 'false') | boolean |
     * | EraseDevice | clear_activation_lock | optional (defaults to 'false') | boolean |
     * | PasscodeLockGracePeriod | passcode_lock_grace_period | Shared iPad | seconds (integer) |
     * | PlayLostModeSound | N/A | Supervised and in lost mode | N/A |
     * | RestartDevice | N/A | Supervised device | N/A |
     * | ScheduleOSUpdate (deprecated on 2022-10-17) | install_action | iOS 9 - 10.2, enrolled via a Prestage enrollment; and/or iOS 10.3 or later; tvOS 12 or later | 1 = Download the update for users to install, 2 = Download and install the update, and restart devices after installation |
     * | ScheduleOSUpdate (deprecated on 2022-10-17) | product_version | iOS 11.3 or later, tvOS 12.2 or later | string |
     * | SettingsDisableBluetooth | N/A | iOS 11.3+ and Supervised | N/A |
     * | SettingsEnableBluetooth | N/A | iOS 11.3+ and Supervised | N/A |
     * | ShutDownDevice | N/A | Supervised device | N/A |
     * | Wallpaper | wallpaper_settings | Supervised device | 1 = Lock screen, 2 = Home screen, 3 = both |
     * | Wallpaper | wallpaper_id | Supervised device (required if wallpaper_content is not set) | Jamf Pro icon ID (integer) |
     * | Wallpaper | wallpaper_content | Supervised device (required if wallpaper_id is not set) | base64 encoded PNG or JPEG |
     * | RefreshCellularPlans | e_sim_server_url | N/A | This URL is obtained from each carrier separately |
     *
     */
    async createMobileDeviceCommand(
        req: Uint8Array,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMobileDeviceCommandResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/mobiledevicecommands/command";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "raw");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "*/*";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMobileDeviceCommandResponse =
            new operations.CreateMobileDeviceCommandResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                break;
        }

        return res;
    }

    /**
     * Creates a new mobile device command
     *
     * @remarks
     * The chart below includes additional requirements for usage of specific commands
     *
     * | command | Parameters | Requirements | Values |
     * | ---------- | ------- | ------------ | ------ |
     * | DeviceLocation | N/A | Supervised and in lost mode | N/A |
     * | DisableLostMode | N/A | Supervised and in lost mode | N/A |
     * | EnableLostMode | lost_mode_message | Supervised device (required if lost_mode_phone is not set) | string |
     * | EnableLostMode | lost_mode_phone | Supervised device (required if lost_mode_message is not set) | string |
     * | EnableLostMode | lost_mode_footnote | optional | string |
     * | EnableLostMode | always_enforce_lost_mode | optional (defaults to 'true') | boolean |
     * | EnableLostMode | lost_mode_with_sound | optional (defaults to 'false') | boolean |
     * | EraseDevice | preserve_data_plan | optional (defaults to 'false') | boolean |
     * | EraseDevice | disallow_proximity_setup | optional (defaults to 'false') | boolean |
     * | PasscodeLockGracePeriod | passcode_lock_grace_period | Shared iPad | seconds (integer) |
     * | PlayLostModeSound | N/A | Supervised and in lost mode | N/A |
     * | RestartDevice | N/A | Supervised device | N/A |
     * | SettingsDisableBluetooth | N/A | iOS 11.3+ and Supervised | N/A |
     * | SettingsEnableBluetooth | N/A | iOS 11.3+ and Supervised | N/A |
     * | ShutDownDevice | N/A | Supervised device | N/A |
     *
     */
    async createMobileDeviceCommandURL(
        req: operations.CreateMobileDeviceCommandURLRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMobileDeviceCommandURLResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateMobileDeviceCommandURLRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/mobiledevicecommands/command/{command}/id/{id_list}",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "*/*";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMobileDeviceCommandURLResponse =
            new operations.CreateMobileDeviceCommandURLResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                break;
        }

        return res;
    }

    /**
     * Sends a new lock command to a list of mobile devices
     */
    async createMobileDeviceLockCommandURL(
        req: operations.CreateMobileDeviceLockCommandURLRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMobileDeviceLockCommandURLResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateMobileDeviceLockCommandURLRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/mobiledevicecommands/command/DeviceLock/{lock_message}/id/{id_list}",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "*/*";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMobileDeviceLockCommandURLResponse =
            new operations.CreateMobileDeviceLockCommandURLResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                break;
        }

        return res;
    }

    /**
     * Creates a new command to set the name of a mobile device.
     */
    async createMobileDeviceNameCommandURL(
        req: operations.CreateMobileDeviceNameCommandURLRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMobileDeviceNameCommandURLResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateMobileDeviceNameCommandURLRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/mobiledevicecommands/command/DeviceName/{device_name}/id/{id_list}",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "*/*";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMobileDeviceNameCommandURLResponse =
            new operations.CreateMobileDeviceNameCommandURLResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                break;
        }

        return res;
    }

    /**
     * Creates a new command to request that a mobile device update its OS. Command and mobile device list specified in URL. Device will be updated to the latest OS version based on device eligibility. (deprecated on 2022-10-17)
     */
    async createMobileScheduleOSUpdateCommandURL(
        req: operations.CreateMobileScheduleOSUpdateCommandURLRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMobileScheduleOSUpdateCommandURLResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateMobileScheduleOSUpdateCommandURLRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/mobiledevicecommands/command/ScheduleOSUpdate/{install_action}/id/{id_list}",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "*/*";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMobileScheduleOSUpdateCommandURLResponse =
            new operations.CreateMobileScheduleOSUpdateCommandURLResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                break;
        }

        return res;
    }

    /**
     * Creates a new command to request that a mobile device update its OS. Command and mobile device list specified in URL. Mixing iOS and tvOS devices in ID list is not advised, as product version is specific to OS type. (deprecated on 2022-10-17)
     */
    async createMobileScheduleOSUpdateCommandWithProductVersionURL(
        req: operations.CreateMobileScheduleOSUpdateCommandWithProductVersionURLRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMobileScheduleOSUpdateCommandWithProductVersionURLResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateMobileScheduleOSUpdateCommandWithProductVersionURLRequest(
                req
            );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/mobiledevicecommands/command/ScheduleOSUpdate/{install_action}/{product_version}/id/{id_list}",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "*/*";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMobileScheduleOSUpdateCommandWithProductVersionURLResponse =
            new operations.CreateMobileScheduleOSUpdateCommandWithProductVersionURLResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 201:
                break;
        }

        return res;
    }

    /**
     * Finds all mobile device commands
     */
    async findMobileDeviceCommands(
        config?: AxiosRequestConfig
    ): Promise<operations.FindMobileDeviceCommandsResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/mobiledevicecommands";

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/xml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.FindMobileDeviceCommandsResponse =
            new operations.FindMobileDeviceCommandsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.mobileDeviceCommands = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.mobileDeviceCommands = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.MobileDeviceCommands,
                        resFieldDepth
                    );
                } else if (utils.matchContentType(contentType, `application/xml`)) {
                    res.body = httpRes?.data;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Finds all mobile device commands for specified command
     */
    async findMobileDeviceCommandsByCommand(
        req: operations.FindMobileDeviceCommandsByCommandRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.FindMobileDeviceCommandsByCommandResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FindMobileDeviceCommandsByCommandRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/mobiledevicecommands/command/{command}",
            req
        );

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/xml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.FindMobileDeviceCommandsByCommandResponse =
            new operations.FindMobileDeviceCommandsByCommandResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.mobileDeviceCommand = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.MobileDeviceCommand
                    );
                } else if (utils.matchContentType(contentType, `application/xml`)) {
                    res.body = httpRes?.data;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Finds all mobile device commands by command name
     */
    async findMobileDeviceCommandsByName(
        req: operations.FindMobileDeviceCommandsByNameRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.FindMobileDeviceCommandsByNameResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FindMobileDeviceCommandsByNameRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/mobiledevicecommands/name/{name}", req);

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/xml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.FindMobileDeviceCommandsByNameResponse =
            new operations.FindMobileDeviceCommandsByNameResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.mobileDeviceCommand = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.MobileDeviceCommand
                    );
                } else if (utils.matchContentType(contentType, `application/xml`)) {
                    res.body = httpRes?.data;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Finds a mobile device command by UUID
     */
    async findMobileDeviceCommandsByUuid(
        req: operations.FindMobileDeviceCommandsByUuidRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.FindMobileDeviceCommandsByUuidResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.FindMobileDeviceCommandsByUuidRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/mobiledevicecommands/uuid/{uuid}", req);

        const client: AxiosInstance =
            this.sdkConfiguration.securityClient || this.sdkConfiguration.defaultClient;

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/xml;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            responseType: "arraybuffer",
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.FindMobileDeviceCommandsByUuidResponse =
            new operations.FindMobileDeviceCommandsByUuidResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        const decodedRes = new TextDecoder().decode(httpRes?.data);
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.mobileDeviceCommand = utils.objectToClass(
                        JSON.parse(decodedRes),
                        shared.MobileDeviceCommand
                    );
                } else if (utils.matchContentType(contentType, `application/xml`)) {
                    res.body = httpRes?.data;
                } else {
                    throw new errors.SDKError(
                        "unknown content-type received: " + contentType,
                        httpRes.status,
                        decodedRes,
                        httpRes
                    );
                }
                break;
        }

        return res;
    }
}
