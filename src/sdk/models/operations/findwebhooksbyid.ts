/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FindWebhooksByIdRequest extends SpeakeasyBase {
    /**
     * ID value to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
    id: number;
}

export enum FindWebhooksById200ApplicationXMLAuthenticationType {
    None = "NONE",
    Basic = "BASIC",
}

export enum FindWebhooksById200ApplicationXMLContentType {
    TextXml = "text/xml",
    ApplicationJson = "application/json",
}

export class FindWebhooksById200ApplicationXMLDisplayFieldsDisplayField extends SpeakeasyBase {
    /**
     * Name of the display field to include for smart group based webhook events
     */
    @SpeakeasyMetadata()
    name?: string;
}

export class FindWebhooksById200ApplicationXMLDisplayFields extends SpeakeasyBase {
    @SpeakeasyMetadata()
    displayField?: FindWebhooksById200ApplicationXMLDisplayFieldsDisplayField;

    @SpeakeasyMetadata()
    size?: number;
}

export enum FindWebhooksById200ApplicationXMLEvent {
    ComputerAdded = "ComputerAdded",
    ComputerCheckIn = "ComputerCheckIn",
    ComputerInventoryCompleted = "ComputerInventoryCompleted",
    ComputerPolicyFinished = "ComputerPolicyFinished",
    ComputerPushCapabilityChanged = "ComputerPushCapabilityChanged",
    JSSShutdown = "JSSShutdown",
    JSSStartup = "JSSStartup",
    MobileDeviceCheckIn = "MobileDeviceCheckIn",
    MobileDeviceCommandCompleted = "MobileDeviceCommandCompleted",
    MobileDeviceEnrolled = "MobileDeviceEnrolled",
    MobileDevicePushSent = "MobileDevicePushSent",
    MobileDeviceUnEnrolled = "MobileDeviceUnEnrolled",
    PatchSoftwareTitleUpdated = "PatchSoftwareTitleUpdated",
    PushSent = "PushSent",
    RestAPIOperation = "RestAPIOperation",
    SCEPChallenge = "SCEPChallenge",
    SmartGroupComputerMembershipChange = "SmartGroupComputerMembershipChange",
    SmartGroupMobileDeviceMembershipChange = "SmartGroupMobileDeviceMembershipChange",
}

/**
 * OK
 */
export class FindWebhooksById200ApplicationXML extends SpeakeasyBase {
    @SpeakeasyMetadata()
    authenticationType?: FindWebhooksById200ApplicationXMLAuthenticationType;

    /**
     * Number of seconds to attempt to connect to the webhooks host server
     */
    @SpeakeasyMetadata()
    connectionTimeout?: number;

    @SpeakeasyMetadata()
    contentType?: FindWebhooksById200ApplicationXMLContentType;

    @SpeakeasyMetadata({ elemType: FindWebhooksById200ApplicationXMLDisplayFields })
    displayFields?: FindWebhooksById200ApplicationXMLDisplayFields[];

    @SpeakeasyMetadata()
    enableDisplayFieldsForGroupObject?: boolean;

    @SpeakeasyMetadata()
    enabled?: boolean;

    @SpeakeasyMetadata()
    event: FindWebhooksById200ApplicationXMLEvent;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name: string;

    @SpeakeasyMetadata()
    password?: string;

    /**
     * Number of seconds to wait for a response from the webhooks host server after sending a request
     */
    @SpeakeasyMetadata()
    readTimeout?: number;

    @SpeakeasyMetadata()
    url: string;

    @SpeakeasyMetadata()
    username?: string;
}

export enum FindWebhooksById200ApplicationJSONAuthenticationType {
    None = "NONE",
    Basic = "BASIC",
}

export enum FindWebhooksById200ApplicationJSONContentType {
    TextXml = "text/xml",
    ApplicationJson = "application/json",
}

export class FindWebhooksById200ApplicationJSONDisplayFieldsDisplayField extends SpeakeasyBase {
    /**
     * Name of the display field to include for smart group based webhook events
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindWebhooksById200ApplicationJSONDisplayFields extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "display_field" })
    @Type(() => FindWebhooksById200ApplicationJSONDisplayFieldsDisplayField)
    displayField?: FindWebhooksById200ApplicationJSONDisplayFieldsDisplayField;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export enum FindWebhooksById200ApplicationJSONEvent {
    ComputerAdded = "ComputerAdded",
    ComputerCheckIn = "ComputerCheckIn",
    ComputerInventoryCompleted = "ComputerInventoryCompleted",
    ComputerPolicyFinished = "ComputerPolicyFinished",
    ComputerPushCapabilityChanged = "ComputerPushCapabilityChanged",
    JSSShutdown = "JSSShutdown",
    JSSStartup = "JSSStartup",
    MobileDeviceCheckIn = "MobileDeviceCheckIn",
    MobileDeviceCommandCompleted = "MobileDeviceCommandCompleted",
    MobileDeviceEnrolled = "MobileDeviceEnrolled",
    MobileDevicePushSent = "MobileDevicePushSent",
    MobileDeviceUnEnrolled = "MobileDeviceUnEnrolled",
    PatchSoftwareTitleUpdated = "PatchSoftwareTitleUpdated",
    PushSent = "PushSent",
    RestAPIOperation = "RestAPIOperation",
    SCEPChallenge = "SCEPChallenge",
    SmartGroupComputerMembershipChange = "SmartGroupComputerMembershipChange",
    SmartGroupMobileDeviceMembershipChange = "SmartGroupMobileDeviceMembershipChange",
}

/**
 * OK
 */
export class FindWebhooksById200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "authentication_type" })
    authenticationType?: FindWebhooksById200ApplicationJSONAuthenticationType;

    /**
     * Number of seconds to attempt to connect to the webhooks host server
     */
    @SpeakeasyMetadata()
    @Expose({ name: "connection_timeout" })
    connectionTimeout?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "content_type" })
    contentType?: FindWebhooksById200ApplicationJSONContentType;

    @SpeakeasyMetadata({ elemType: FindWebhooksById200ApplicationJSONDisplayFields })
    @Expose({ name: "display_fields" })
    @Type(() => FindWebhooksById200ApplicationJSONDisplayFields)
    displayFields?: FindWebhooksById200ApplicationJSONDisplayFields[];

    @SpeakeasyMetadata()
    @Expose({ name: "enable_display_fields_for_group_object" })
    enableDisplayFieldsForGroupObject?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "event" })
    event: FindWebhooksById200ApplicationJSONEvent;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "password" })
    password?: string;

    /**
     * Number of seconds to wait for a response from the webhooks host server after sending a request
     */
    @SpeakeasyMetadata()
    @Expose({ name: "read_timeout" })
    readTimeout?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url: string;

    @SpeakeasyMetadata()
    @Expose({ name: "username" })
    username?: string;
}

export class FindWebhooksByIdResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    body?: Uint8Array;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    findWebhooksById200ApplicationJSONObject?: FindWebhooksById200ApplicationJSON;
}
