/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FindPoliciesByIdRequest extends SpeakeasyBase {
    /**
     * ID value to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
    id: number;
}

export enum FindPoliciesById200ApplicationXMLAccountMaintenanceAccountsAccountAction {
    Create = "Create",
    Reset = "Reset",
    Delete = "Delete",
    DisableFileVault = "DisableFileVault",
}

export class FindPoliciesById200ApplicationXMLAccountMaintenanceAccountsAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesById200ApplicationXMLAccountMaintenanceAccountsAccountAction;

    @SpeakeasyMetadata()
    admin?: boolean;

    @SpeakeasyMetadata()
    archiveHomeDirectory?: boolean;

    @SpeakeasyMetadata()
    archiveHomeDirectoryTo?: string;

    @SpeakeasyMetadata()
    filevaultEnabled?: boolean;

    @SpeakeasyMetadata()
    home?: string;

    @SpeakeasyMetadata()
    password?: string;

    @SpeakeasyMetadata()
    picture?: string;

    @SpeakeasyMetadata()
    realname?: string;

    @SpeakeasyMetadata()
    username?: string;
}

export class FindPoliciesById200ApplicationXMLAccountMaintenanceAccounts extends SpeakeasyBase {
    @SpeakeasyMetadata()
    account?: FindPoliciesById200ApplicationXMLAccountMaintenanceAccountsAccount;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesById200ApplicationXMLAccountMaintenanceDirectoryBindingsBinding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLAccountMaintenanceDirectoryBindings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    binding?: FindPoliciesById200ApplicationXMLAccountMaintenanceDirectoryBindingsBinding;

    @SpeakeasyMetadata()
    size?: number;
}

export enum FindPoliciesById200ApplicationXMLAccountMaintenanceManagementAccountAction {
    Specified = "specified",
    Random = "random",
    Reset = "reset",
    FileVaultEnable = "fileVaultEnable",
    FileVaultDisable = "fileVaultDisable",
}

export class FindPoliciesById200ApplicationXMLAccountMaintenanceManagementAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesById200ApplicationXMLAccountMaintenanceManagementAccountAction;

    @SpeakeasyMetadata()
    managedPassword?: string;

    /**
     * Only necessary when utilizing the random action
     */
    @SpeakeasyMetadata()
    managedPasswordLength?: number;
}

export enum FindPoliciesById200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPasswordOfMode {
    Command = "command",
    None = "none",
}

export class FindPoliciesById200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPassword extends SpeakeasyBase {
    @SpeakeasyMetadata()
    ofMode?: FindPoliciesById200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPasswordOfMode;

    @SpeakeasyMetadata()
    ofPassword?: string;
}

export class FindPoliciesById200ApplicationXMLAccountMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLAccountMaintenanceAccounts })
    accounts?: FindPoliciesById200ApplicationXMLAccountMaintenanceAccounts[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesById200ApplicationXMLAccountMaintenanceDirectoryBindings,
    })
    directoryBindings?: FindPoliciesById200ApplicationXMLAccountMaintenanceDirectoryBindings[];

    @SpeakeasyMetadata()
    managementAccount?: FindPoliciesById200ApplicationXMLAccountMaintenanceManagementAccount;

    @SpeakeasyMetadata()
    openFirmwareEfiPassword?: FindPoliciesById200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPassword;
}

export enum FindPoliciesById200ApplicationXMLDiskEncryptionAction {
    Apply = "apply",
    Remediate = "remediate",
}

export enum FindPoliciesById200ApplicationXMLDiskEncryptionRemediateKeyType {
    Individual = "Individual",
    Institutional = "Institutional",
    IndividualAndInstitutional = "Individual And Institutional",
}

export class FindPoliciesById200ApplicationXMLDiskEncryption extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesById200ApplicationXMLDiskEncryptionAction;

    @SpeakeasyMetadata()
    authRestart?: boolean;

    @SpeakeasyMetadata()
    diskEncryptionConfigurationId?: number;

    /**
     * disk encryption ID to utilize for remediating institutional recovery key types.
     */
    @SpeakeasyMetadata()
    remediateDiskEncryptionConfigurationId?: number;

    @SpeakeasyMetadata()
    remediateKeyType?: FindPoliciesById200ApplicationXMLDiskEncryptionRemediateKeyType;
}

export enum FindPoliciesById200ApplicationXMLDockItemsDockItemAction {
    AddToBeginning = "Add To Beginning",
    AddToEnd = "Add To End",
    Remove = "Remove",
}

export class FindPoliciesById200ApplicationXMLDockItemsDockItem extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesById200ApplicationXMLDockItemsDockItemAction;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLDockItems extends SpeakeasyBase {
    @SpeakeasyMetadata()
    dockItem?: FindPoliciesById200ApplicationXMLDockItemsDockItem;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesById200ApplicationXMLFilesProcesses extends SpeakeasyBase {
    @SpeakeasyMetadata()
    deleteFile?: boolean;

    @SpeakeasyMetadata()
    killProcess?: boolean;

    @SpeakeasyMetadata()
    locateFile?: string;

    @SpeakeasyMetadata()
    runCommand?: string;

    @SpeakeasyMetadata()
    searchByPath?: string;

    @SpeakeasyMetadata()
    searchForProcess?: string;

    @SpeakeasyMetadata()
    spotlightSearch?: string;

    @SpeakeasyMetadata()
    updateLocateDatabase?: boolean;
}

export class FindPoliciesById200ApplicationXMLGeneralCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the category
     */
    @SpeakeasyMetadata()
    name: string;
}

export enum FindPoliciesById200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOnDay {
    Sun = "Sun",
    Mon = "Mon",
    Tue = "Tue",
    Wed = "Wed",
    Thu = "Thu",
    Fri = "Fri",
    Sat = "Sat",
}

export class FindPoliciesById200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOn extends SpeakeasyBase {
    @SpeakeasyMetadata()
    day?: FindPoliciesById200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOnDay;
}

export class FindPoliciesById200ApplicationXMLGeneralDateTimeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    activationDate?: string;

    @SpeakeasyMetadata()
    activationDateEpoch?: number;

    @SpeakeasyMetadata()
    activationDateUtc?: string;

    @SpeakeasyMetadata()
    expirationDate?: string;

    @SpeakeasyMetadata()
    expirationDateEpoch?: number;

    @SpeakeasyMetadata()
    expirationDateUtc?: string;

    @SpeakeasyMetadata()
    noExecuteEnd?: string;

    @SpeakeasyMetadata()
    noExecuteOn?: FindPoliciesById200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOn;

    @SpeakeasyMetadata()
    noExecuteStart?: string;
}

export enum FindPoliciesById200ApplicationXMLGeneralFrequency {
    OncePerComputer = "Once per computer",
    OncePerUserPerComputer = "Once per user per computer",
    OncePerUser = "Once per user",
    OnceEveryDay = "Once every day",
    OnceEveryWeek = "Once every week",
    OnceEveryMonth = "Once every month",
    Ongoing = "Ongoing",
}

export enum FindPoliciesById200ApplicationXMLGeneralNetworkLimitationsMinimumNetworkConnection {
    NoMinimum = "No Minimum",
    Ethernet = "Ethernet",
}

export class FindPoliciesById200ApplicationXMLGeneralNetworkLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    anyIpAddress?: boolean;

    @SpeakeasyMetadata()
    minimumNetworkConnection?: FindPoliciesById200ApplicationXMLGeneralNetworkLimitationsMinimumNetworkConnection;
}

export enum FindPoliciesById200ApplicationXMLGeneralNetworkRequirements {
    Any = "Any",
    Ethernet = "Ethernet",
}

export class FindPoliciesById200ApplicationXMLGeneralOverrideDefaultSettings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    distributionPoint?: string;

    @SpeakeasyMetadata()
    forceAfpSmb?: boolean;

    @SpeakeasyMetadata()
    sus?: string;

    @SpeakeasyMetadata()
    targetDrive?: string;
}

export enum FindPoliciesById200ApplicationXMLGeneralRetryEvent {
    None = "none",
    Trigger = "trigger",
    CheckIn = "check-in",
}

export class FindPoliciesById200ApplicationXMLGeneralSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    name: string;
}

export class FindPoliciesById200ApplicationXMLGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    category?: FindPoliciesById200ApplicationXMLGeneralCategory;

    @SpeakeasyMetadata()
    dateTimeLimitations?: FindPoliciesById200ApplicationXMLGeneralDateTimeLimitations;

    @SpeakeasyMetadata()
    enabled?: boolean;

    @SpeakeasyMetadata()
    frequency?: FindPoliciesById200ApplicationXMLGeneralFrequency;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    locationUserOnly?: boolean;

    @SpeakeasyMetadata()
    name: string;

    @SpeakeasyMetadata()
    networkLimitations?: FindPoliciesById200ApplicationXMLGeneralNetworkLimitations;

    @SpeakeasyMetadata()
    networkRequirements?: FindPoliciesById200ApplicationXMLGeneralNetworkRequirements;

    @SpeakeasyMetadata()
    notifyOnEachFailedRetry?: boolean;

    @SpeakeasyMetadata()
    offline?: boolean;

    @SpeakeasyMetadata()
    overrideDefaultSettings?: FindPoliciesById200ApplicationXMLGeneralOverrideDefaultSettings;

    @SpeakeasyMetadata()
    retryAttempts?: number;

    @SpeakeasyMetadata()
    retryEvent?: FindPoliciesById200ApplicationXMLGeneralRetryEvent;

    @SpeakeasyMetadata()
    site?: FindPoliciesById200ApplicationXMLGeneralSite;

    @SpeakeasyMetadata()
    targetDrive?: string;

    @SpeakeasyMetadata()
    trigger?: string;

    @SpeakeasyMetadata()
    triggerCheckin?: boolean;

    @SpeakeasyMetadata()
    triggerEnrollmentComplete?: boolean;

    @SpeakeasyMetadata()
    triggerLogin?: boolean;

    @SpeakeasyMetadata()
    triggerLogout?: boolean;

    @SpeakeasyMetadata()
    triggerNetworkStateChanged?: boolean;

    @SpeakeasyMetadata()
    triggerOther?: string;

    @SpeakeasyMetadata()
    triggerStartup?: boolean;
}

export class FindPoliciesById200ApplicationXMLMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata()
    byhost?: boolean;

    @SpeakeasyMetadata()
    heal?: boolean;

    @SpeakeasyMetadata()
    installAllCachedPackages?: boolean;

    @SpeakeasyMetadata()
    permissions?: boolean;

    @SpeakeasyMetadata()
    prebindings?: boolean;

    @SpeakeasyMetadata()
    recon?: boolean;

    @SpeakeasyMetadata()
    resetName?: boolean;

    @SpeakeasyMetadata()
    systemCache?: boolean;

    @SpeakeasyMetadata()
    userCache?: boolean;

    @SpeakeasyMetadata()
    verify?: boolean;
}

export enum FindPoliciesById200ApplicationXMLPackageConfigurationPackagesPackageAction {
    Install = "Install",
    Cache = "Cache",
    InstallCached = "Install Cached",
}

export class FindPoliciesById200ApplicationXMLPackageConfigurationPackagesPackage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesById200ApplicationXMLPackageConfigurationPackagesPackageAction;

    @SpeakeasyMetadata()
    feu?: boolean;

    @SpeakeasyMetadata()
    fut?: boolean;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    updateAutorun?: boolean;
}

export class FindPoliciesById200ApplicationXMLPackageConfigurationPackages extends SpeakeasyBase {
    @SpeakeasyMetadata()
    package?: FindPoliciesById200ApplicationXMLPackageConfigurationPackagesPackage;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesById200ApplicationXMLPackageConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLPackageConfigurationPackages })
    packages?: FindPoliciesById200ApplicationXMLPackageConfigurationPackages[];
}

export enum FindPoliciesById200ApplicationXMLPrintersPrinterAction {
    Install = "install",
    Uninstall = "uninstall",
}

export class FindPoliciesById200ApplicationXMLPrintersPrinter extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesById200ApplicationXMLPrintersPrinterAction;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    makeDefault?: boolean;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLPrinters extends SpeakeasyBase {
    @SpeakeasyMetadata()
    leaveExistingDefault?: string;

    @SpeakeasyMetadata()
    printer?: FindPoliciesById200ApplicationXMLPrintersPrinter;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesById200ApplicationXMLScopeBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    building?: FindPoliciesById200ApplicationXMLScopeBuildingsBuilding;
}

export class FindPoliciesById200ApplicationXMLScopeComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computerGroup?: FindPoliciesById200ApplicationXMLScopeComputerGroupsComputerGroup;
}

export class FindPoliciesById200ApplicationXMLScopeComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    udid?: string;
}

export class FindPoliciesById200ApplicationXMLScopeComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computer?: FindPoliciesById200ApplicationXMLScopeComputersComputer;
}

export class FindPoliciesById200ApplicationXMLScopeDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    department?: FindPoliciesById200ApplicationXMLScopeDepartmentsDepartment;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    building?: FindPoliciesById200ApplicationXMLScopeExclusionsBuildingsBuilding;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computerGroup?: FindPoliciesById200ApplicationXMLScopeExclusionsComputerGroupsComputerGroup;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    udid?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computer?: FindPoliciesById200ApplicationXMLScopeExclusionsComputersComputer;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    department?: FindPoliciesById200ApplicationXMLScopeExclusionsDepartmentsDepartment;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    ibeacon?: FindPoliciesById200ApplicationXMLScopeExclusionsIbeaconsIbeacon;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the network segment
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    uid?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    networkSegment?: FindPoliciesById200ApplicationXMLScopeExclusionsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    userGroup?: FindPoliciesById200ApplicationXMLScopeExclusionsUserGroupsUserGroup;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeExclusionsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    user?: FindPoliciesById200ApplicationXMLScopeExclusionsUsersUser;
}

export class FindPoliciesById200ApplicationXMLScopeExclusions extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeExclusionsBuildings })
    buildings?: FindPoliciesById200ApplicationXMLScopeExclusionsBuildings[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeExclusionsComputerGroups })
    computerGroups?: FindPoliciesById200ApplicationXMLScopeExclusionsComputerGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeExclusionsComputers })
    computers?: FindPoliciesById200ApplicationXMLScopeExclusionsComputers[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeExclusionsDepartments })
    departments?: FindPoliciesById200ApplicationXMLScopeExclusionsDepartments[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeExclusionsIbeacons })
    ibeacons?: FindPoliciesById200ApplicationXMLScopeExclusionsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesById200ApplicationXMLScopeExclusionsNetworkSegments,
    })
    networkSegments?: FindPoliciesById200ApplicationXMLScopeExclusionsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeExclusionsUserGroups })
    userGroups?: FindPoliciesById200ApplicationXMLScopeExclusionsUserGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeExclusionsUsers })
    users?: FindPoliciesById200ApplicationXMLScopeExclusionsUsers[];
}

export class FindPoliciesById200ApplicationXMLScopeLimitToUsersUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    userGroup?: string;
}

export class FindPoliciesById200ApplicationXMLScopeLimitToUsers extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeLimitToUsersUserGroups })
    userGroups?: FindPoliciesById200ApplicationXMLScopeLimitToUsersUserGroups[];
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    ibeacon?: FindPoliciesById200ApplicationXMLScopeLimitationsIbeaconsIbeacon;
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    networkSegment?: FindPoliciesById200ApplicationXMLScopeLimitationsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    userGroup?: FindPoliciesById200ApplicationXMLScopeLimitationsUserGroupsUserGroup;
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLScopeLimitationsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    user?: FindPoliciesById200ApplicationXMLScopeLimitationsUsersUser;
}

export class FindPoliciesById200ApplicationXMLScopeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeLimitationsIbeacons })
    ibeacons?: FindPoliciesById200ApplicationXMLScopeLimitationsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesById200ApplicationXMLScopeLimitationsNetworkSegments,
    })
    networkSegments?: FindPoliciesById200ApplicationXMLScopeLimitationsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeLimitationsUserGroups })
    userGroups?: FindPoliciesById200ApplicationXMLScopeLimitationsUserGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeLimitationsUsers })
    users?: FindPoliciesById200ApplicationXMLScopeLimitationsUsers[];
}

export class FindPoliciesById200ApplicationXMLScope extends SpeakeasyBase {
    @SpeakeasyMetadata()
    allComputers?: boolean;

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeBuildings })
    buildings?: FindPoliciesById200ApplicationXMLScopeBuildings[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeComputerGroups })
    computerGroups?: FindPoliciesById200ApplicationXMLScopeComputerGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeComputers })
    computers?: FindPoliciesById200ApplicationXMLScopeComputers[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScopeDepartments })
    departments?: FindPoliciesById200ApplicationXMLScopeDepartments[];

    @SpeakeasyMetadata()
    exclusions?: FindPoliciesById200ApplicationXMLScopeExclusions;

    @SpeakeasyMetadata()
    limitToUsers?: FindPoliciesById200ApplicationXMLScopeLimitToUsers;

    @SpeakeasyMetadata()
    limitations?: FindPoliciesById200ApplicationXMLScopeLimitations;
}

export enum FindPoliciesById200ApplicationXMLScriptsScriptPriority {
    Before = "Before",
    After = "After",
}

export class FindPoliciesById200ApplicationXMLScriptsScript extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    parameter10?: string;

    @SpeakeasyMetadata()
    parameter11?: string;

    @SpeakeasyMetadata()
    parameter4?: string;

    @SpeakeasyMetadata()
    parameter5?: string;

    @SpeakeasyMetadata()
    parameter6?: string;

    @SpeakeasyMetadata()
    parameter7?: string;

    @SpeakeasyMetadata()
    parameter8?: string;

    @SpeakeasyMetadata()
    parameter9?: string;

    @SpeakeasyMetadata()
    priority?: FindPoliciesById200ApplicationXMLScriptsScriptPriority;
}

export class FindPoliciesById200ApplicationXMLScripts extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLScriptsScript })
    script?: FindPoliciesById200ApplicationXMLScriptsScript[];

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesById200ApplicationXMLSelfServiceSelfServiceCategoriesCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    displayIn?: boolean;

    @SpeakeasyMetadata()
    featureIn?: boolean;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesById200ApplicationXMLSelfServiceSelfServiceCategories extends SpeakeasyBase {
    @SpeakeasyMetadata()
    category?: FindPoliciesById200ApplicationXMLSelfServiceSelfServiceCategoriesCategory;
}

export class FindPoliciesById200ApplicationXMLSelfServiceSelfServiceIcon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    filename?: string;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    uri?: string;
}

export class FindPoliciesById200ApplicationXMLSelfService extends SpeakeasyBase {
    @SpeakeasyMetadata()
    featureOnMainPage?: boolean;

    @SpeakeasyMetadata()
    forceUsersToViewDescription?: boolean;

    @SpeakeasyMetadata()
    installButtonText?: string;

    @SpeakeasyMetadata()
    reInstallButtonText?: string;

    @SpeakeasyMetadata()
    selfServiceCategories?: FindPoliciesById200ApplicationXMLSelfServiceSelfServiceCategories;

    @SpeakeasyMetadata()
    selfServiceDescription?: string;

    @SpeakeasyMetadata()
    selfServiceDisplayName?: string;

    @SpeakeasyMetadata()
    selfServiceIcon?: FindPoliciesById200ApplicationXMLSelfServiceSelfServiceIcon;

    @SpeakeasyMetadata()
    useForSelfService?: boolean;
}

export class FindPoliciesById200ApplicationXMLUserInteraction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    allowDeferralMinutes?: number;

    @SpeakeasyMetadata()
    allowDeferralUntilUtc?: string;

    @SpeakeasyMetadata()
    allowUserToDefer?: boolean;

    @SpeakeasyMetadata()
    messageFinish?: string;

    @SpeakeasyMetadata()
    messageStart?: string;
}

/**
 * OK
 */
export class FindPoliciesById200ApplicationXML extends SpeakeasyBase {
    @SpeakeasyMetadata()
    accountMaintenance?: FindPoliciesById200ApplicationXMLAccountMaintenance;

    @SpeakeasyMetadata()
    diskEncryption?: FindPoliciesById200ApplicationXMLDiskEncryption;

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLDockItems })
    dockItems?: FindPoliciesById200ApplicationXMLDockItems[];

    @SpeakeasyMetadata()
    filesProcesses?: FindPoliciesById200ApplicationXMLFilesProcesses;

    @SpeakeasyMetadata()
    general?: FindPoliciesById200ApplicationXMLGeneral;

    @SpeakeasyMetadata()
    maintenance?: FindPoliciesById200ApplicationXMLMaintenance;

    @SpeakeasyMetadata()
    packageConfiguration?: FindPoliciesById200ApplicationXMLPackageConfiguration;

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationXMLPrinters })
    printers?: FindPoliciesById200ApplicationXMLPrinters[];

    @SpeakeasyMetadata()
    scope?: FindPoliciesById200ApplicationXMLScope;

    @SpeakeasyMetadata()
    scripts?: FindPoliciesById200ApplicationXMLScripts;

    @SpeakeasyMetadata()
    selfService?: FindPoliciesById200ApplicationXMLSelfService;

    @SpeakeasyMetadata()
    userInteraction?: FindPoliciesById200ApplicationXMLUserInteraction;
}

export enum FindPoliciesById200ApplicationJSONAccountMaintenanceAccountsAccountAction {
    Create = "Create",
    Reset = "Reset",
    Delete = "Delete",
    DisableFileVault = "DisableFileVault",
}

export class FindPoliciesById200ApplicationJSONAccountMaintenanceAccountsAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesById200ApplicationJSONAccountMaintenanceAccountsAccountAction;

    @SpeakeasyMetadata()
    @Expose({ name: "admin" })
    admin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "archive_home_directory" })
    archiveHomeDirectory?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "archive_home_directory_to" })
    archiveHomeDirectoryTo?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "filevault_enabled" })
    filevaultEnabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "home" })
    home?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "password" })
    password?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "picture" })
    picture?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "realname" })
    realname?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "username" })
    username?: string;
}

export class FindPoliciesById200ApplicationJSONAccountMaintenanceAccounts extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "account" })
    @Type(() => FindPoliciesById200ApplicationJSONAccountMaintenanceAccountsAccount)
    account?: FindPoliciesById200ApplicationJSONAccountMaintenanceAccountsAccount;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesById200ApplicationJSONAccountMaintenanceDirectoryBindingsBinding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONAccountMaintenanceDirectoryBindings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "binding" })
    @Type(() => FindPoliciesById200ApplicationJSONAccountMaintenanceDirectoryBindingsBinding)
    binding?: FindPoliciesById200ApplicationJSONAccountMaintenanceDirectoryBindingsBinding;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export enum FindPoliciesById200ApplicationJSONAccountMaintenanceManagementAccountAction {
    Specified = "specified",
    Random = "random",
    Reset = "reset",
    FileVaultEnable = "fileVaultEnable",
    FileVaultDisable = "fileVaultDisable",
}

export class FindPoliciesById200ApplicationJSONAccountMaintenanceManagementAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesById200ApplicationJSONAccountMaintenanceManagementAccountAction;

    @SpeakeasyMetadata()
    @Expose({ name: "managed_password" })
    managedPassword?: string;

    /**
     * Only necessary when utilizing the random action
     */
    @SpeakeasyMetadata()
    @Expose({ name: "managed_password_length" })
    managedPasswordLength?: number;
}

export enum FindPoliciesById200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPasswordOfMode {
    Command = "command",
    None = "none",
}

export class FindPoliciesById200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPassword extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "of_mode" })
    ofMode?: FindPoliciesById200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPasswordOfMode;

    @SpeakeasyMetadata()
    @Expose({ name: "of_password" })
    ofPassword?: string;
}

export class FindPoliciesById200ApplicationJSONAccountMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONAccountMaintenanceAccounts })
    @Expose({ name: "accounts" })
    @Type(() => FindPoliciesById200ApplicationJSONAccountMaintenanceAccounts)
    accounts?: FindPoliciesById200ApplicationJSONAccountMaintenanceAccounts[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesById200ApplicationJSONAccountMaintenanceDirectoryBindings,
    })
    @Expose({ name: "directory_bindings" })
    @Type(() => FindPoliciesById200ApplicationJSONAccountMaintenanceDirectoryBindings)
    directoryBindings?: FindPoliciesById200ApplicationJSONAccountMaintenanceDirectoryBindings[];

    @SpeakeasyMetadata()
    @Expose({ name: "management_account" })
    @Type(() => FindPoliciesById200ApplicationJSONAccountMaintenanceManagementAccount)
    managementAccount?: FindPoliciesById200ApplicationJSONAccountMaintenanceManagementAccount;

    @SpeakeasyMetadata()
    @Expose({ name: "open_firmware_efi_password" })
    @Type(() => FindPoliciesById200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPassword)
    openFirmwareEfiPassword?: FindPoliciesById200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPassword;
}

export enum FindPoliciesById200ApplicationJSONDiskEncryptionAction {
    Apply = "apply",
    Remediate = "remediate",
}

export enum FindPoliciesById200ApplicationJSONDiskEncryptionRemediateKeyType {
    Individual = "Individual",
    Institutional = "Institutional",
    IndividualAndInstitutional = "Individual And Institutional",
}

export class FindPoliciesById200ApplicationJSONDiskEncryption extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesById200ApplicationJSONDiskEncryptionAction;

    @SpeakeasyMetadata()
    @Expose({ name: "auth_restart" })
    authRestart?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "disk_encryption_configuration_id" })
    diskEncryptionConfigurationId?: number;

    /**
     * disk encryption ID to utilize for remediating institutional recovery key types.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remediate_disk_encryption_configuration_id" })
    remediateDiskEncryptionConfigurationId?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "remediate_key_type" })
    remediateKeyType?: FindPoliciesById200ApplicationJSONDiskEncryptionRemediateKeyType;
}

export enum FindPoliciesById200ApplicationJSONDockItemsDockItemAction {
    AddToBeginning = "Add To Beginning",
    AddToEnd = "Add To End",
    Remove = "Remove",
}

export class FindPoliciesById200ApplicationJSONDockItemsDockItem extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesById200ApplicationJSONDockItemsDockItemAction;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONDockItems extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "dock_item" })
    @Type(() => FindPoliciesById200ApplicationJSONDockItemsDockItem)
    dockItem?: FindPoliciesById200ApplicationJSONDockItemsDockItem;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesById200ApplicationJSONFilesProcesses extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "delete_file" })
    deleteFile?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "kill_process" })
    killProcess?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "locate_file" })
    locateFile?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "run_command" })
    runCommand?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "search_by_path" })
    searchByPath?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "search_for_process" })
    searchForProcess?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "spotlight_search" })
    spotlightSearch?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "update_locate_database" })
    updateLocateDatabase?: boolean;
}

export class FindPoliciesById200ApplicationJSONGeneralCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the category
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

export enum FindPoliciesById200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOnDay {
    Sun = "Sun",
    Mon = "Mon",
    Tue = "Tue",
    Wed = "Wed",
    Thu = "Thu",
    Fri = "Fri",
    Sat = "Sat",
}

export class FindPoliciesById200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOn extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "day" })
    day?: FindPoliciesById200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOnDay;
}

export class FindPoliciesById200ApplicationJSONGeneralDateTimeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "activation_date" })
    activationDate?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "activation_date_epoch" })
    activationDateEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "activation_date_utc" })
    activationDateUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date" })
    expirationDate?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date_epoch" })
    expirationDateEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date_utc" })
    expirationDateUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_end" })
    noExecuteEnd?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_on" })
    @Type(() => FindPoliciesById200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOn)
    noExecuteOn?: FindPoliciesById200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOn;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_start" })
    noExecuteStart?: string;
}

export enum FindPoliciesById200ApplicationJSONGeneralFrequency {
    OncePerComputer = "Once per computer",
    OncePerUserPerComputer = "Once per user per computer",
    OncePerUser = "Once per user",
    OnceEveryDay = "Once every day",
    OnceEveryWeek = "Once every week",
    OnceEveryMonth = "Once every month",
    Ongoing = "Ongoing",
}

export enum FindPoliciesById200ApplicationJSONGeneralNetworkLimitationsMinimumNetworkConnection {
    NoMinimum = "No Minimum",
    Ethernet = "Ethernet",
}

export class FindPoliciesById200ApplicationJSONGeneralNetworkLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "any_ip_address" })
    anyIpAddress?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "minimum_network_connection" })
    minimumNetworkConnection?: FindPoliciesById200ApplicationJSONGeneralNetworkLimitationsMinimumNetworkConnection;
}

export enum FindPoliciesById200ApplicationJSONGeneralNetworkRequirements {
    Any = "Any",
    Ethernet = "Ethernet",
}

export class FindPoliciesById200ApplicationJSONGeneralOverrideDefaultSettings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "distribution_point" })
    distributionPoint?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "force_afp_smb" })
    forceAfpSmb?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "sus" })
    sus?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "target_drive" })
    targetDrive?: string;
}

export enum FindPoliciesById200ApplicationJSONGeneralRetryEvent {
    None = "none",
    Trigger = "trigger",
    CheckIn = "check-in",
}

export class FindPoliciesById200ApplicationJSONGeneralSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

export class FindPoliciesById200ApplicationJSONGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => FindPoliciesById200ApplicationJSONGeneralCategory)
    category?: FindPoliciesById200ApplicationJSONGeneralCategory;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_limitations" })
    @Type(() => FindPoliciesById200ApplicationJSONGeneralDateTimeLimitations)
    dateTimeLimitations?: FindPoliciesById200ApplicationJSONGeneralDateTimeLimitations;

    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "frequency" })
    frequency?: FindPoliciesById200ApplicationJSONGeneralFrequency;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "location_user_only" })
    locationUserOnly?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "network_limitations" })
    @Type(() => FindPoliciesById200ApplicationJSONGeneralNetworkLimitations)
    networkLimitations?: FindPoliciesById200ApplicationJSONGeneralNetworkLimitations;

    @SpeakeasyMetadata()
    @Expose({ name: "network_requirements" })
    networkRequirements?: FindPoliciesById200ApplicationJSONGeneralNetworkRequirements;

    @SpeakeasyMetadata()
    @Expose({ name: "notify_on_each_failed_retry" })
    notifyOnEachFailedRetry?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "offline" })
    offline?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "override_default_settings" })
    @Type(() => FindPoliciesById200ApplicationJSONGeneralOverrideDefaultSettings)
    overrideDefaultSettings?: FindPoliciesById200ApplicationJSONGeneralOverrideDefaultSettings;

    @SpeakeasyMetadata()
    @Expose({ name: "retry_attempts" })
    retryAttempts?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "retry_event" })
    retryEvent?: FindPoliciesById200ApplicationJSONGeneralRetryEvent;

    @SpeakeasyMetadata()
    @Expose({ name: "site" })
    @Type(() => FindPoliciesById200ApplicationJSONGeneralSite)
    site?: FindPoliciesById200ApplicationJSONGeneralSite;

    @SpeakeasyMetadata()
    @Expose({ name: "target_drive" })
    targetDrive?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger" })
    trigger?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_checkin" })
    triggerCheckin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_enrollment_complete" })
    triggerEnrollmentComplete?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_login" })
    triggerLogin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_logout" })
    triggerLogout?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_network_state_changed" })
    triggerNetworkStateChanged?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_other" })
    triggerOther?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_startup" })
    triggerStartup?: boolean;
}

export class FindPoliciesById200ApplicationJSONMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "byhost" })
    byhost?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "heal" })
    heal?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "install_all_cached_packages" })
    installAllCachedPackages?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "permissions" })
    permissions?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "prebindings" })
    prebindings?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "recon" })
    recon?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "reset_name" })
    resetName?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "system_cache" })
    systemCache?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "user_cache" })
    userCache?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "verify" })
    verify?: boolean;
}

export enum FindPoliciesById200ApplicationJSONPackageConfigurationPackagesPackageAction {
    Install = "Install",
    Cache = "Cache",
    InstallCached = "Install Cached",
}

export class FindPoliciesById200ApplicationJSONPackageConfigurationPackagesPackage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesById200ApplicationJSONPackageConfigurationPackagesPackageAction;

    @SpeakeasyMetadata()
    @Expose({ name: "feu" })
    feu?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "fut" })
    fut?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "update_autorun" })
    updateAutorun?: boolean;
}

export class FindPoliciesById200ApplicationJSONPackageConfigurationPackages extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "package" })
    @Type(() => FindPoliciesById200ApplicationJSONPackageConfigurationPackagesPackage)
    package?: FindPoliciesById200ApplicationJSONPackageConfigurationPackagesPackage;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesById200ApplicationJSONPackageConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONPackageConfigurationPackages })
    @Expose({ name: "packages" })
    @Type(() => FindPoliciesById200ApplicationJSONPackageConfigurationPackages)
    packages?: FindPoliciesById200ApplicationJSONPackageConfigurationPackages[];
}

export enum FindPoliciesById200ApplicationJSONPrintersPrinterAction {
    Install = "install",
    Uninstall = "uninstall",
}

export class FindPoliciesById200ApplicationJSONPrintersPrinter extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesById200ApplicationJSONPrintersPrinterAction;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "make_default" })
    makeDefault?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONPrinters extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "leave_existing_default" })
    leaveExistingDefault?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "printer" })
    @Type(() => FindPoliciesById200ApplicationJSONPrintersPrinter)
    printer?: FindPoliciesById200ApplicationJSONPrintersPrinter;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesById200ApplicationJSONScopeBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeBuildingsBuilding)
    building?: FindPoliciesById200ApplicationJSONScopeBuildingsBuilding;
}

export class FindPoliciesById200ApplicationJSONScopeComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer_group" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeComputerGroupsComputerGroup)
    computerGroup?: FindPoliciesById200ApplicationJSONScopeComputerGroupsComputerGroup;
}

export class FindPoliciesById200ApplicationJSONScopeComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;
}

export class FindPoliciesById200ApplicationJSONScopeComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeComputersComputer)
    computer?: FindPoliciesById200ApplicationJSONScopeComputersComputer;
}

export class FindPoliciesById200ApplicationJSONScopeDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeDepartmentsDepartment)
    department?: FindPoliciesById200ApplicationJSONScopeDepartmentsDepartment;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsBuildingsBuilding)
    building?: FindPoliciesById200ApplicationJSONScopeExclusionsBuildingsBuilding;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer_group" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsComputerGroupsComputerGroup)
    computerGroup?: FindPoliciesById200ApplicationJSONScopeExclusionsComputerGroupsComputerGroup;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsComputersComputer)
    computer?: FindPoliciesById200ApplicationJSONScopeExclusionsComputersComputer;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsDepartmentsDepartment)
    department?: FindPoliciesById200ApplicationJSONScopeExclusionsDepartmentsDepartment;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ibeacon" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsIbeaconsIbeacon)
    ibeacon?: FindPoliciesById200ApplicationJSONScopeExclusionsIbeaconsIbeacon;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the network segment
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uid" })
    uid?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsNetworkSegmentsNetworkSegment)
    networkSegment?: FindPoliciesById200ApplicationJSONScopeExclusionsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsUserGroupsUserGroup)
    userGroup?: FindPoliciesById200ApplicationJSONScopeExclusionsUserGroupsUserGroup;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeExclusionsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsUsersUser)
    user?: FindPoliciesById200ApplicationJSONScopeExclusionsUsersUser;
}

export class FindPoliciesById200ApplicationJSONScopeExclusions extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeExclusionsBuildings })
    @Expose({ name: "buildings" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsBuildings)
    buildings?: FindPoliciesById200ApplicationJSONScopeExclusionsBuildings[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesById200ApplicationJSONScopeExclusionsComputerGroups,
    })
    @Expose({ name: "computer_groups" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsComputerGroups)
    computerGroups?: FindPoliciesById200ApplicationJSONScopeExclusionsComputerGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeExclusionsComputers })
    @Expose({ name: "computers" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsComputers)
    computers?: FindPoliciesById200ApplicationJSONScopeExclusionsComputers[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeExclusionsDepartments })
    @Expose({ name: "departments" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsDepartments)
    departments?: FindPoliciesById200ApplicationJSONScopeExclusionsDepartments[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeExclusionsIbeacons })
    @Expose({ name: "ibeacons" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsIbeacons)
    ibeacons?: FindPoliciesById200ApplicationJSONScopeExclusionsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesById200ApplicationJSONScopeExclusionsNetworkSegments,
    })
    @Expose({ name: "network_segments" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsNetworkSegments)
    networkSegments?: FindPoliciesById200ApplicationJSONScopeExclusionsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeExclusionsUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsUserGroups)
    userGroups?: FindPoliciesById200ApplicationJSONScopeExclusionsUserGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeExclusionsUsers })
    @Expose({ name: "users" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusionsUsers)
    users?: FindPoliciesById200ApplicationJSONScopeExclusionsUsers[];
}

export class FindPoliciesById200ApplicationJSONScopeLimitToUsersUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    userGroup?: string;
}

export class FindPoliciesById200ApplicationJSONScopeLimitToUsers extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeLimitToUsersUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitToUsersUserGroups)
    userGroups?: FindPoliciesById200ApplicationJSONScopeLimitToUsersUserGroups[];
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ibeacon" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsIbeaconsIbeacon)
    ibeacon?: FindPoliciesById200ApplicationJSONScopeLimitationsIbeaconsIbeacon;
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsNetworkSegmentsNetworkSegment)
    networkSegment?: FindPoliciesById200ApplicationJSONScopeLimitationsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsUserGroupsUserGroup)
    userGroup?: FindPoliciesById200ApplicationJSONScopeLimitationsUserGroupsUserGroup;
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONScopeLimitationsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsUsersUser)
    user?: FindPoliciesById200ApplicationJSONScopeLimitationsUsersUser;
}

export class FindPoliciesById200ApplicationJSONScopeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeLimitationsIbeacons })
    @Expose({ name: "ibeacons" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsIbeacons)
    ibeacons?: FindPoliciesById200ApplicationJSONScopeLimitationsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesById200ApplicationJSONScopeLimitationsNetworkSegments,
    })
    @Expose({ name: "network_segments" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsNetworkSegments)
    networkSegments?: FindPoliciesById200ApplicationJSONScopeLimitationsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeLimitationsUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsUserGroups)
    userGroups?: FindPoliciesById200ApplicationJSONScopeLimitationsUserGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeLimitationsUsers })
    @Expose({ name: "users" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitationsUsers)
    users?: FindPoliciesById200ApplicationJSONScopeLimitationsUsers[];
}

export class FindPoliciesById200ApplicationJSONScope extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "all_computers" })
    allComputers?: boolean;

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeBuildings })
    @Expose({ name: "buildings" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeBuildings)
    buildings?: FindPoliciesById200ApplicationJSONScopeBuildings[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeComputerGroups })
    @Expose({ name: "computer_groups" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeComputerGroups)
    computerGroups?: FindPoliciesById200ApplicationJSONScopeComputerGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeComputers })
    @Expose({ name: "computers" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeComputers)
    computers?: FindPoliciesById200ApplicationJSONScopeComputers[];

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScopeDepartments })
    @Expose({ name: "departments" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeDepartments)
    departments?: FindPoliciesById200ApplicationJSONScopeDepartments[];

    @SpeakeasyMetadata()
    @Expose({ name: "exclusions" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeExclusions)
    exclusions?: FindPoliciesById200ApplicationJSONScopeExclusions;

    @SpeakeasyMetadata()
    @Expose({ name: "limit_to_users" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitToUsers)
    limitToUsers?: FindPoliciesById200ApplicationJSONScopeLimitToUsers;

    @SpeakeasyMetadata()
    @Expose({ name: "limitations" })
    @Type(() => FindPoliciesById200ApplicationJSONScopeLimitations)
    limitations?: FindPoliciesById200ApplicationJSONScopeLimitations;
}

export enum FindPoliciesById200ApplicationJSONScriptsScriptPriority {
    Before = "Before",
    After = "After",
}

export class FindPoliciesById200ApplicationJSONScriptsScript extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter10" })
    parameter10?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter11" })
    parameter11?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter4" })
    parameter4?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter5" })
    parameter5?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter6" })
    parameter6?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter7" })
    parameter7?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter8" })
    parameter8?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter9" })
    parameter9?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "priority" })
    priority?: FindPoliciesById200ApplicationJSONScriptsScriptPriority;
}

export class FindPoliciesById200ApplicationJSONScripts extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONScriptsScript })
    @Expose({ name: "script" })
    @Type(() => FindPoliciesById200ApplicationJSONScriptsScript)
    script?: FindPoliciesById200ApplicationJSONScriptsScript[];

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesById200ApplicationJSONSelfServiceSelfServiceCategoriesCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "display_in" })
    displayIn?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "feature_in" })
    featureIn?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesById200ApplicationJSONSelfServiceSelfServiceCategories extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => FindPoliciesById200ApplicationJSONSelfServiceSelfServiceCategoriesCategory)
    category?: FindPoliciesById200ApplicationJSONSelfServiceSelfServiceCategoriesCategory;
}

export class FindPoliciesById200ApplicationJSONSelfServiceSelfServiceIcon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "filename" })
    filename?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class FindPoliciesById200ApplicationJSONSelfService extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "feature_on_main_page" })
    featureOnMainPage?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "force_users_to_view_description" })
    forceUsersToViewDescription?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "install_button_text" })
    installButtonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "re-install_button_text" })
    reInstallButtonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_categories" })
    @Type(() => FindPoliciesById200ApplicationJSONSelfServiceSelfServiceCategories)
    selfServiceCategories?: FindPoliciesById200ApplicationJSONSelfServiceSelfServiceCategories;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_description" })
    selfServiceDescription?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_display_name" })
    selfServiceDisplayName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_icon" })
    @Type(() => FindPoliciesById200ApplicationJSONSelfServiceSelfServiceIcon)
    selfServiceIcon?: FindPoliciesById200ApplicationJSONSelfServiceSelfServiceIcon;

    @SpeakeasyMetadata()
    @Expose({ name: "use_for_self_service" })
    useForSelfService?: boolean;
}

export class FindPoliciesById200ApplicationJSONUserInteraction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "allow_deferral_minutes" })
    allowDeferralMinutes?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "allow_deferral_until_utc" })
    allowDeferralUntilUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "allow_user_to_defer" })
    allowUserToDefer?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "message_finish" })
    messageFinish?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "message_start" })
    messageStart?: string;
}

/**
 * OK
 */
export class FindPoliciesById200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "account_maintenance" })
    @Type(() => FindPoliciesById200ApplicationJSONAccountMaintenance)
    accountMaintenance?: FindPoliciesById200ApplicationJSONAccountMaintenance;

    @SpeakeasyMetadata()
    @Expose({ name: "disk_encryption" })
    @Type(() => FindPoliciesById200ApplicationJSONDiskEncryption)
    diskEncryption?: FindPoliciesById200ApplicationJSONDiskEncryption;

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONDockItems })
    @Expose({ name: "dock_items" })
    @Type(() => FindPoliciesById200ApplicationJSONDockItems)
    dockItems?: FindPoliciesById200ApplicationJSONDockItems[];

    @SpeakeasyMetadata()
    @Expose({ name: "files_processes" })
    @Type(() => FindPoliciesById200ApplicationJSONFilesProcesses)
    filesProcesses?: FindPoliciesById200ApplicationJSONFilesProcesses;

    @SpeakeasyMetadata()
    @Expose({ name: "general" })
    @Type(() => FindPoliciesById200ApplicationJSONGeneral)
    general?: FindPoliciesById200ApplicationJSONGeneral;

    @SpeakeasyMetadata()
    @Expose({ name: "maintenance" })
    @Type(() => FindPoliciesById200ApplicationJSONMaintenance)
    maintenance?: FindPoliciesById200ApplicationJSONMaintenance;

    @SpeakeasyMetadata()
    @Expose({ name: "package_configuration" })
    @Type(() => FindPoliciesById200ApplicationJSONPackageConfiguration)
    packageConfiguration?: FindPoliciesById200ApplicationJSONPackageConfiguration;

    @SpeakeasyMetadata({ elemType: FindPoliciesById200ApplicationJSONPrinters })
    @Expose({ name: "printers" })
    @Type(() => FindPoliciesById200ApplicationJSONPrinters)
    printers?: FindPoliciesById200ApplicationJSONPrinters[];

    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    @Type(() => FindPoliciesById200ApplicationJSONScope)
    scope?: FindPoliciesById200ApplicationJSONScope;

    @SpeakeasyMetadata()
    @Expose({ name: "scripts" })
    @Type(() => FindPoliciesById200ApplicationJSONScripts)
    scripts?: FindPoliciesById200ApplicationJSONScripts;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service" })
    @Type(() => FindPoliciesById200ApplicationJSONSelfService)
    selfService?: FindPoliciesById200ApplicationJSONSelfService;

    @SpeakeasyMetadata()
    @Expose({ name: "user_interaction" })
    @Type(() => FindPoliciesById200ApplicationJSONUserInteraction)
    userInteraction?: FindPoliciesById200ApplicationJSONUserInteraction;
}

export class FindPoliciesByIdResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    body?: Uint8Array;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    findPoliciesById200ApplicationJSONObject?: FindPoliciesById200ApplicationJSON;
}
