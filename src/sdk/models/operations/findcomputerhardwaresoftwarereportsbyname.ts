/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { RFCDate } from "../../types";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FindComputerHardwareSoftwareReportsByNameRequest extends SpeakeasyBase {
    /**
     * End date (e.g. yyyy-mm-dd)
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=end_date" })
    endDate: RFCDate;

    /**
     * Name to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=name" })
    name: string;

    /**
     * Start date (e.g. yyyy-mm-dd)
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=start_date" })
    startDate: RFCDate;
}

export enum FindComputerHardwareSoftwareReportsByName200ApplicationXMLFontReportType {
    Added = "Added",
    Deleted = "Deleted",
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationXMLFontReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    dateTime?: string;

    @SpeakeasyMetadata()
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    path?: string;

    @SpeakeasyMetadata()
    type?: FindComputerHardwareSoftwareReportsByName200ApplicationXMLFontReportType;

    @SpeakeasyMetadata()
    version?: string;
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationXMLHardwareReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    nicSpeed?: string;

    @SpeakeasyMetadata()
    bootPartitionUsedPercent?: number;

    @SpeakeasyMetadata()
    coreCount?: number;

    @SpeakeasyMetadata()
    dateTime?: string;

    @SpeakeasyMetadata()
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    make?: string;

    @SpeakeasyMetadata()
    modelIdentifier?: string;

    @SpeakeasyMetadata()
    openRamSlots?: number;

    @SpeakeasyMetadata()
    operatingSystem?: string;

    @SpeakeasyMetadata()
    opticalDrive?: string;

    @SpeakeasyMetadata()
    processorCount?: number;

    @SpeakeasyMetadata()
    processorSpeedMhz?: number;

    @SpeakeasyMetadata()
    serialNumber?: string;

    @SpeakeasyMetadata()
    servicePack?: string;

    @SpeakeasyMetadata()
    totalHarddriveSize?: string;

    @SpeakeasyMetadata()
    totalRamMb?: number;
}

export enum FindComputerHardwareSoftwareReportsByName200ApplicationXMLPluginReportType {
    Added = "Added",
    Removed = "Removed",
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationXMLPluginReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    dateTime?: string;

    @SpeakeasyMetadata()
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    path?: string;

    @SpeakeasyMetadata()
    type?: FindComputerHardwareSoftwareReportsByName200ApplicationXMLPluginReportType;

    @SpeakeasyMetadata()
    version?: string;
}

export enum FindComputerHardwareSoftwareReportsByName200ApplicationXMLSoftwareReportType {
    Added = "Added",
    Deleted = "Deleted",
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationXMLSoftwareReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    dateTime?: string;

    @SpeakeasyMetadata()
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    path?: string;

    @SpeakeasyMetadata()
    type?: FindComputerHardwareSoftwareReportsByName200ApplicationXMLSoftwareReportType;

    @SpeakeasyMetadata()
    version?: string;
}

/**
 * OK
 */
export class FindComputerHardwareSoftwareReportsByName200ApplicationXML extends SpeakeasyBase {
    @SpeakeasyMetadata()
    fontReport?: FindComputerHardwareSoftwareReportsByName200ApplicationXMLFontReport;

    @SpeakeasyMetadata()
    hardwareReport?: FindComputerHardwareSoftwareReportsByName200ApplicationXMLHardwareReport;

    @SpeakeasyMetadata()
    pluginReport?: FindComputerHardwareSoftwareReportsByName200ApplicationXMLPluginReport;

    @SpeakeasyMetadata()
    softwareReport?: FindComputerHardwareSoftwareReportsByName200ApplicationXMLSoftwareReport;
}

export enum FindComputerHardwareSoftwareReportsByName200ApplicationJSONFontReportType {
    Added = "Added",
    Deleted = "Deleted",
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationJSONFontReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "date_time" })
    dateTime?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_epoch" })
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_utc" })
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: FindComputerHardwareSoftwareReportsByName200ApplicationJSONFontReportType;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: string;
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationJSONHardwareReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "NIC_speed" })
    nicSpeed?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "boot_partition_used_percent" })
    bootPartitionUsedPercent?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "core_count" })
    coreCount?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time" })
    dateTime?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_epoch" })
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_utc" })
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "make" })
    make?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "model_identifier" })
    modelIdentifier?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "open_ram_slots" })
    openRamSlots?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "operating_system" })
    operatingSystem?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "optical_drive" })
    opticalDrive?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "processor_count" })
    processorCount?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "processor_speed_mhz" })
    processorSpeedMhz?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "serial_number" })
    serialNumber?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "service_pack" })
    servicePack?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "total_harddrive_size" })
    totalHarddriveSize?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "total_ram_mb" })
    totalRamMb?: number;
}

export enum FindComputerHardwareSoftwareReportsByName200ApplicationJSONPluginReportType {
    Added = "Added",
    Removed = "Removed",
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationJSONPluginReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "date_time" })
    dateTime?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_epoch" })
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_utc" })
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: FindComputerHardwareSoftwareReportsByName200ApplicationJSONPluginReportType;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: string;
}

export enum FindComputerHardwareSoftwareReportsByName200ApplicationJSONSoftwareReportType {
    Added = "Added",
    Deleted = "Deleted",
}

export class FindComputerHardwareSoftwareReportsByName200ApplicationJSONSoftwareReport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "date_time" })
    dateTime?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_epoch" })
    dateTimeEpoch?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_utc" })
    dateTimeUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: FindComputerHardwareSoftwareReportsByName200ApplicationJSONSoftwareReportType;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: string;
}

/**
 * OK
 */
export class FindComputerHardwareSoftwareReportsByName200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "font_report" })
    @Type(() => FindComputerHardwareSoftwareReportsByName200ApplicationJSONFontReport)
    fontReport?: FindComputerHardwareSoftwareReportsByName200ApplicationJSONFontReport;

    @SpeakeasyMetadata()
    @Expose({ name: "hardware_report" })
    @Type(() => FindComputerHardwareSoftwareReportsByName200ApplicationJSONHardwareReport)
    hardwareReport?: FindComputerHardwareSoftwareReportsByName200ApplicationJSONHardwareReport;

    @SpeakeasyMetadata()
    @Expose({ name: "plugin_report" })
    @Type(() => FindComputerHardwareSoftwareReportsByName200ApplicationJSONPluginReport)
    pluginReport?: FindComputerHardwareSoftwareReportsByName200ApplicationJSONPluginReport;

    @SpeakeasyMetadata()
    @Expose({ name: "software_report" })
    @Type(() => FindComputerHardwareSoftwareReportsByName200ApplicationJSONSoftwareReport)
    softwareReport?: FindComputerHardwareSoftwareReportsByName200ApplicationJSONSoftwareReport;
}

export class FindComputerHardwareSoftwareReportsByNameResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    body?: Uint8Array;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    findComputerHardwareSoftwareReportsByName200ApplicationJSONObject?: FindComputerHardwareSoftwareReportsByName200ApplicationJSON;
}
