/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FindComputerGroupsByNameRequest extends SpeakeasyBase {
    /**
     * Name to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=name" })
    name: string;
}

export class FindComputerGroupsByName200ApplicationXMLComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    altMacAddress?: string;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    macAddress?: string;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    serialNumber?: string;
}

export class FindComputerGroupsByName200ApplicationXMLComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computer?: FindComputerGroupsByName200ApplicationXMLComputersComputer;

    @SpeakeasyMetadata()
    size?: number;
}

export enum FindComputerGroupsByName200ApplicationXMLCriteriaCriterionAndOr {
    And = "and",
    Or = "or",
}

export class FindComputerGroupsByName200ApplicationXMLCriteriaCriterion extends SpeakeasyBase {
    @SpeakeasyMetadata()
    andOr?: FindComputerGroupsByName200ApplicationXMLCriteriaCriterionAndOr;

    @SpeakeasyMetadata()
    closingParen?: boolean;

    /**
     * Name of the criteria
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    openingParen?: boolean;

    @SpeakeasyMetadata()
    priority?: number;

    /**
     * Operator
     */
    @SpeakeasyMetadata()
    searchType?: string;

    @SpeakeasyMetadata()
    value?: string;
}

export class FindComputerGroupsByName200ApplicationXMLCriteria extends SpeakeasyBase {
    @SpeakeasyMetadata()
    criterion?: FindComputerGroupsByName200ApplicationXMLCriteriaCriterion;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindComputerGroupsByName200ApplicationXMLSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    name: string;
}

/**
 * OK
 */
export class FindComputerGroupsByName200ApplicationXML extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindComputerGroupsByName200ApplicationXMLComputers })
    computers?: FindComputerGroupsByName200ApplicationXMLComputers[];

    @SpeakeasyMetadata({ elemType: FindComputerGroupsByName200ApplicationXMLCriteria })
    criteria?: FindComputerGroupsByName200ApplicationXMLCriteria[];

    @SpeakeasyMetadata()
    id?: number;

    /**
     * Smart or static group
     */
    @SpeakeasyMetadata()
    isSmart?: boolean;

    /**
     * Name of the group
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    site?: FindComputerGroupsByName200ApplicationXMLSite;
}

export class FindComputerGroupsByName200ApplicationJSONComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "alt_mac_address" })
    altMacAddress?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "mac_address" })
    macAddress?: string;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "serial_number" })
    serialNumber?: string;
}

export class FindComputerGroupsByName200ApplicationJSONComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => FindComputerGroupsByName200ApplicationJSONComputersComputer)
    computer?: FindComputerGroupsByName200ApplicationJSONComputersComputer;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export enum FindComputerGroupsByName200ApplicationJSONCriteriaCriterionAndOr {
    And = "and",
    Or = "or",
}

export class FindComputerGroupsByName200ApplicationJSONCriteriaCriterion extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "and_or" })
    andOr?: FindComputerGroupsByName200ApplicationJSONCriteriaCriterionAndOr;

    @SpeakeasyMetadata()
    @Expose({ name: "closing_paren" })
    closingParen?: boolean;

    /**
     * Name of the criteria
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "opening_paren" })
    openingParen?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "priority" })
    priority?: number;

    /**
     * Operator
     */
    @SpeakeasyMetadata()
    @Expose({ name: "search_type" })
    searchType?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export class FindComputerGroupsByName200ApplicationJSONCriteria extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "criterion" })
    @Type(() => FindComputerGroupsByName200ApplicationJSONCriteriaCriterion)
    criterion?: FindComputerGroupsByName200ApplicationJSONCriteriaCriterion;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindComputerGroupsByName200ApplicationJSONSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

/**
 * OK
 */
export class FindComputerGroupsByName200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindComputerGroupsByName200ApplicationJSONComputers })
    @Expose({ name: "computers" })
    @Type(() => FindComputerGroupsByName200ApplicationJSONComputers)
    computers?: FindComputerGroupsByName200ApplicationJSONComputers[];

    @SpeakeasyMetadata({ elemType: FindComputerGroupsByName200ApplicationJSONCriteria })
    @Expose({ name: "criteria" })
    @Type(() => FindComputerGroupsByName200ApplicationJSONCriteria)
    criteria?: FindComputerGroupsByName200ApplicationJSONCriteria[];

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Smart or static group
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_smart" })
    isSmart?: boolean;

    /**
     * Name of the group
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "site" })
    @Type(() => FindComputerGroupsByName200ApplicationJSONSite)
    site?: FindComputerGroupsByName200ApplicationJSONSite;
}

export class FindComputerGroupsByNameResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    body?: Uint8Array;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    findComputerGroupsByName200ApplicationJSONObject?: FindComputerGroupsByName200ApplicationJSON;
}
