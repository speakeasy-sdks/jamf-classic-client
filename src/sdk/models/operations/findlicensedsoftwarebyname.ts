/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FindLicensedSoftwareByNameRequest extends SpeakeasyBase {
    /**
     * Name to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=name" })
    name: string;
}

export enum FindLicensedSoftwareByName200ApplicationXMLFontDefinitionsDefinitionCompareType {
    Like = "like",
    Is = "is",
}

export class FindLicensedSoftwareByName200ApplicationXMLFontDefinitionsDefinition extends SpeakeasyBase {
    @SpeakeasyMetadata()
    compareType?: FindLicensedSoftwareByName200ApplicationXMLFontDefinitionsDefinitionCompareType;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    version?: string;
}

export class FindLicensedSoftwareByName200ApplicationXMLFontDefinitions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    definition?: FindLicensedSoftwareByName200ApplicationXMLFontDefinitionsDefinition;
}

export class FindLicensedSoftwareByName200ApplicationXMLGeneralSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    name: string;
}

export class FindLicensedSoftwareByName200ApplicationXMLGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    excludeTitlesPurchasedFromAppStore?: boolean;

    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the licensed software
     */
    @SpeakeasyMetadata()
    name: string;

    @SpeakeasyMetadata()
    notes?: string;

    @SpeakeasyMetadata()
    platform?: string;

    @SpeakeasyMetadata()
    publisher?: string;

    @SpeakeasyMetadata()
    removeTitlesFromInventoryReports?: boolean;

    @SpeakeasyMetadata()
    sendEmailOnViolation?: boolean;

    @SpeakeasyMetadata()
    site?: FindLicensedSoftwareByName200ApplicationXMLGeneralSite;
}

export class FindLicensedSoftwareByName200ApplicationXMLLicensesLicenseAttachmentsAttachment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    filename?: string;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    uri?: string;
}

export class FindLicensedSoftwareByName200ApplicationXMLLicensesLicenseAttachments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    attachment?: FindLicensedSoftwareByName200ApplicationXMLLicensesLicenseAttachmentsAttachment;
}

export enum FindLicensedSoftwareByName200ApplicationXMLLicensesLicenseLicenseType {
    Standard = "Standard",
    Concurrent = "Concurrent",
    SiteLicense = "Site License",
}

export class FindLicensedSoftwareByName200ApplicationXMLLicensesLicensePurchasing extends SpeakeasyBase {
    @SpeakeasyMetadata()
    isAnnual?: boolean;

    @SpeakeasyMetadata()
    isPerpetual?: boolean;

    @SpeakeasyMetadata()
    licenseExpires?: string;

    @SpeakeasyMetadata()
    licenseExpiresEpoch?: number;

    @SpeakeasyMetadata()
    licenseExpiresUtc?: string;

    @SpeakeasyMetadata()
    lifeExpectancy?: number;

    @SpeakeasyMetadata()
    poDate?: string;

    @SpeakeasyMetadata()
    poDateEpoch?: number;

    @SpeakeasyMetadata()
    poDateUtc?: string;

    @SpeakeasyMetadata()
    poNumber?: string;

    @SpeakeasyMetadata()
    purchasePrice?: string;

    @SpeakeasyMetadata()
    purchasingAccount?: string;

    @SpeakeasyMetadata()
    purchasingContact?: string;

    @SpeakeasyMetadata()
    vendor?: string;
}

export class FindLicensedSoftwareByName200ApplicationXMLLicensesLicense extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindLicensedSoftwareByName200ApplicationXMLLicensesLicenseAttachments,
    })
    attachments?: FindLicensedSoftwareByName200ApplicationXMLLicensesLicenseAttachments[];

    @SpeakeasyMetadata()
    licenseCount?: number;

    @SpeakeasyMetadata()
    licenseType?: FindLicensedSoftwareByName200ApplicationXMLLicensesLicenseLicenseType;

    @SpeakeasyMetadata()
    notes?: string;

    @SpeakeasyMetadata()
    organizationName?: string;

    @SpeakeasyMetadata()
    purchasing?: FindLicensedSoftwareByName200ApplicationXMLLicensesLicensePurchasing;

    @SpeakeasyMetadata()
    registeredTo?: string;

    @SpeakeasyMetadata()
    serialNumber1?: string;

    @SpeakeasyMetadata()
    serialNumber2?: string;
}

export class FindLicensedSoftwareByName200ApplicationXMLLicenses extends SpeakeasyBase {
    @SpeakeasyMetadata()
    license?: FindLicensedSoftwareByName200ApplicationXMLLicensesLicense;

    @SpeakeasyMetadata()
    size?: number;
}

export enum FindLicensedSoftwareByName200ApplicationXMLPluginDefinitionsDefinitionCompareType {
    Like = "like",
    Is = "is",
}

export class FindLicensedSoftwareByName200ApplicationXMLPluginDefinitionsDefinition extends SpeakeasyBase {
    @SpeakeasyMetadata()
    compareType?: FindLicensedSoftwareByName200ApplicationXMLPluginDefinitionsDefinitionCompareType;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    version?: string;
}

export class FindLicensedSoftwareByName200ApplicationXMLPluginDefinitions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    definition?: FindLicensedSoftwareByName200ApplicationXMLPluginDefinitionsDefinition;
}

export enum FindLicensedSoftwareByName200ApplicationXMLSoftwareDefinitionsDefinitionCompareType {
    Like = "like",
    Is = "is",
}

export class FindLicensedSoftwareByName200ApplicationXMLSoftwareDefinitionsDefinition extends SpeakeasyBase {
    @SpeakeasyMetadata()
    compareType?: FindLicensedSoftwareByName200ApplicationXMLSoftwareDefinitionsDefinitionCompareType;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    version?: string;
}

export class FindLicensedSoftwareByName200ApplicationXMLSoftwareDefinitions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    definition?: FindLicensedSoftwareByName200ApplicationXMLSoftwareDefinitionsDefinition;
}

/**
 * OK
 */
export class FindLicensedSoftwareByName200ApplicationXML extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindLicensedSoftwareByName200ApplicationXMLFontDefinitions })
    fontDefinitions?: FindLicensedSoftwareByName200ApplicationXMLFontDefinitions[];

    @SpeakeasyMetadata()
    general?: FindLicensedSoftwareByName200ApplicationXMLGeneral;

    @SpeakeasyMetadata({ elemType: FindLicensedSoftwareByName200ApplicationXMLLicenses })
    licenses?: FindLicensedSoftwareByName200ApplicationXMLLicenses[];

    @SpeakeasyMetadata({ elemType: FindLicensedSoftwareByName200ApplicationXMLPluginDefinitions })
    pluginDefinitions?: FindLicensedSoftwareByName200ApplicationXMLPluginDefinitions[];

    @SpeakeasyMetadata({ elemType: FindLicensedSoftwareByName200ApplicationXMLSoftwareDefinitions })
    softwareDefinitions?: FindLicensedSoftwareByName200ApplicationXMLSoftwareDefinitions[];
}

export enum FindLicensedSoftwareByName200ApplicationJSONFontDefinitionsDefinitionCompareType {
    Like = "like",
    Is = "is",
}

export class FindLicensedSoftwareByName200ApplicationJSONFontDefinitionsDefinition extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "compare_type" })
    compareType?: FindLicensedSoftwareByName200ApplicationJSONFontDefinitionsDefinitionCompareType;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: string;
}

export class FindLicensedSoftwareByName200ApplicationJSONFontDefinitions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "definition" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONFontDefinitionsDefinition)
    definition?: FindLicensedSoftwareByName200ApplicationJSONFontDefinitionsDefinition;
}

export class FindLicensedSoftwareByName200ApplicationJSONGeneralSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

export class FindLicensedSoftwareByName200ApplicationJSONGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "exclude_titles_purchased_from_app_store" })
    excludeTitlesPurchasedFromAppStore?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the licensed software
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "notes" })
    notes?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "platform" })
    platform?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "publisher" })
    publisher?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "remove_titles_from_inventory_reports" })
    removeTitlesFromInventoryReports?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "send_email_on_violation" })
    sendEmailOnViolation?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "site" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONGeneralSite)
    site?: FindLicensedSoftwareByName200ApplicationJSONGeneralSite;
}

export class FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseAttachmentsAttachment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "filename" })
    filename?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseAttachments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "attachment" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseAttachmentsAttachment)
    attachment?: FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseAttachmentsAttachment;
}

export enum FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseLicenseType {
    Standard = "Standard",
    Concurrent = "Concurrent",
    SiteLicense = "Site License",
}

export class FindLicensedSoftwareByName200ApplicationJSONLicensesLicensePurchasing extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "is_annual" })
    isAnnual?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "is_perpetual" })
    isPerpetual?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "license_expires" })
    licenseExpires?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "license_expires_epoch" })
    licenseExpiresEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "license_expires_utc" })
    licenseExpiresUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "life_expectancy" })
    lifeExpectancy?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "po_date" })
    poDate?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "po_date_epoch" })
    poDateEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "po_date_utc" })
    poDateUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "po_number" })
    poNumber?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "purchase_price" })
    purchasePrice?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "purchasing_account" })
    purchasingAccount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "purchasing_contact" })
    purchasingContact?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "vendor" })
    vendor?: string;
}

export class FindLicensedSoftwareByName200ApplicationJSONLicensesLicense extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseAttachments,
    })
    @Expose({ name: "attachments" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseAttachments)
    attachments?: FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseAttachments[];

    @SpeakeasyMetadata()
    @Expose({ name: "license_count" })
    licenseCount?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "license_type" })
    licenseType?: FindLicensedSoftwareByName200ApplicationJSONLicensesLicenseLicenseType;

    @SpeakeasyMetadata()
    @Expose({ name: "notes" })
    notes?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "organization_name" })
    organizationName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "purchasing" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONLicensesLicensePurchasing)
    purchasing?: FindLicensedSoftwareByName200ApplicationJSONLicensesLicensePurchasing;

    @SpeakeasyMetadata()
    @Expose({ name: "registered_to" })
    registeredTo?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "serial_number_1" })
    serialNumber1?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "serial_number_2" })
    serialNumber2?: string;
}

export class FindLicensedSoftwareByName200ApplicationJSONLicenses extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "license" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONLicensesLicense)
    license?: FindLicensedSoftwareByName200ApplicationJSONLicensesLicense;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export enum FindLicensedSoftwareByName200ApplicationJSONPluginDefinitionsDefinitionCompareType {
    Like = "like",
    Is = "is",
}

export class FindLicensedSoftwareByName200ApplicationJSONPluginDefinitionsDefinition extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "compare_type" })
    compareType?: FindLicensedSoftwareByName200ApplicationJSONPluginDefinitionsDefinitionCompareType;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: string;
}

export class FindLicensedSoftwareByName200ApplicationJSONPluginDefinitions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "definition" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONPluginDefinitionsDefinition)
    definition?: FindLicensedSoftwareByName200ApplicationJSONPluginDefinitionsDefinition;
}

export enum FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitionsDefinitionCompareType {
    Like = "like",
    Is = "is",
}

export class FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitionsDefinition extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "compare_type" })
    compareType?: FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitionsDefinitionCompareType;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version?: string;
}

export class FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "definition" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitionsDefinition)
    definition?: FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitionsDefinition;
}

/**
 * OK
 */
export class FindLicensedSoftwareByName200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindLicensedSoftwareByName200ApplicationJSONFontDefinitions })
    @Expose({ name: "font_definitions" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONFontDefinitions)
    fontDefinitions?: FindLicensedSoftwareByName200ApplicationJSONFontDefinitions[];

    @SpeakeasyMetadata()
    @Expose({ name: "general" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONGeneral)
    general?: FindLicensedSoftwareByName200ApplicationJSONGeneral;

    @SpeakeasyMetadata({ elemType: FindLicensedSoftwareByName200ApplicationJSONLicenses })
    @Expose({ name: "licenses" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONLicenses)
    licenses?: FindLicensedSoftwareByName200ApplicationJSONLicenses[];

    @SpeakeasyMetadata({ elemType: FindLicensedSoftwareByName200ApplicationJSONPluginDefinitions })
    @Expose({ name: "plugin_definitions" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONPluginDefinitions)
    pluginDefinitions?: FindLicensedSoftwareByName200ApplicationJSONPluginDefinitions[];

    @SpeakeasyMetadata({
        elemType: FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitions,
    })
    @Expose({ name: "software_definitions" })
    @Type(() => FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitions)
    softwareDefinitions?: FindLicensedSoftwareByName200ApplicationJSONSoftwareDefinitions[];
}

export class FindLicensedSoftwareByNameResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    body?: Uint8Array;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    findLicensedSoftwareByName200ApplicationJSONObject?: FindLicensedSoftwareByName200ApplicationJSON;
}
