/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Subset to filter by
 */
export enum FindPoliciesByNameSubsetSubset {
    General = "General",
    Scope = "Scope",
    SelfService = "SelfService",
    PackageConfiguration = "PackageConfiguration",
    Scripts = "Scripts",
    Printers = "Printers",
    DockItems = "DockItems",
    AccountMaintenance = "AccountMaintenance",
    Reboot = "Reboot",
    Maintenance = "Maintenance",
    FilesProcesses = "FilesProcesses",
    UserInteraction = "UserInteraction",
    DiskEncryption = "DiskEncryption",
}

export class FindPoliciesByNameSubsetRequest extends SpeakeasyBase {
    /**
     * Name to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=name" })
    name: string;

    /**
     * Subset to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=subset" })
    subset: FindPoliciesByNameSubsetSubset;
}

export enum FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceAccountsAccountAction {
    Create = "Create",
    Reset = "Reset",
    Delete = "Delete",
    DisableFileVault = "DisableFileVault",
}

export class FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceAccountsAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceAccountsAccountAction;

    @SpeakeasyMetadata()
    admin?: boolean;

    @SpeakeasyMetadata()
    archiveHomeDirectory?: boolean;

    @SpeakeasyMetadata()
    archiveHomeDirectoryTo?: string;

    @SpeakeasyMetadata()
    filevaultEnabled?: boolean;

    @SpeakeasyMetadata()
    home?: string;

    @SpeakeasyMetadata()
    password?: string;

    @SpeakeasyMetadata()
    picture?: string;

    @SpeakeasyMetadata()
    realname?: string;

    @SpeakeasyMetadata()
    username?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceAccounts extends SpeakeasyBase {
    @SpeakeasyMetadata()
    account?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceAccountsAccount;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceDirectoryBindingsBinding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceDirectoryBindings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    binding?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceDirectoryBindingsBinding;

    @SpeakeasyMetadata()
    size?: number;
}

export enum FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceManagementAccountAction {
    Specified = "specified",
    Random = "random",
    Reset = "reset",
    FileVaultEnable = "fileVaultEnable",
    FileVaultDisable = "fileVaultDisable",
}

export class FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceManagementAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceManagementAccountAction;

    @SpeakeasyMetadata()
    managedPassword?: string;

    /**
     * Only necessary when utilizing the random action
     */
    @SpeakeasyMetadata()
    managedPasswordLength?: number;
}

export enum FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPasswordOfMode {
    Command = "command",
    None = "none",
}

export class FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPassword extends SpeakeasyBase {
    @SpeakeasyMetadata()
    ofMode?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPasswordOfMode;

    @SpeakeasyMetadata()
    ofPassword?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLAccountMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceAccounts,
    })
    accounts?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceAccounts[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceDirectoryBindings,
    })
    directoryBindings?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceDirectoryBindings[];

    @SpeakeasyMetadata()
    managementAccount?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceManagementAccount;

    @SpeakeasyMetadata()
    openFirmwareEfiPassword?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenanceOpenFirmwareEfiPassword;
}

export enum FindPoliciesByNameSubset200ApplicationXMLDiskEncryptionAction {
    Apply = "apply",
    Remediate = "remediate",
}

export enum FindPoliciesByNameSubset200ApplicationXMLDiskEncryptionRemediateKeyType {
    Individual = "Individual",
    Institutional = "Institutional",
    IndividualAndInstitutional = "Individual And Institutional",
}

export class FindPoliciesByNameSubset200ApplicationXMLDiskEncryption extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesByNameSubset200ApplicationXMLDiskEncryptionAction;

    @SpeakeasyMetadata()
    authRestart?: boolean;

    @SpeakeasyMetadata()
    diskEncryptionConfigurationId?: number;

    /**
     * disk encryption ID to utilize for remediating institutional recovery key types.
     */
    @SpeakeasyMetadata()
    remediateDiskEncryptionConfigurationId?: number;

    @SpeakeasyMetadata()
    remediateKeyType?: FindPoliciesByNameSubset200ApplicationXMLDiskEncryptionRemediateKeyType;
}

export enum FindPoliciesByNameSubset200ApplicationXMLDockItemsDockItemAction {
    AddToBeginning = "Add To Beginning",
    AddToEnd = "Add To End",
    Remove = "Remove",
}

export class FindPoliciesByNameSubset200ApplicationXMLDockItemsDockItem extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesByNameSubset200ApplicationXMLDockItemsDockItemAction;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLDockItems extends SpeakeasyBase {
    @SpeakeasyMetadata()
    dockItem?: FindPoliciesByNameSubset200ApplicationXMLDockItemsDockItem;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationXMLFilesProcesses extends SpeakeasyBase {
    @SpeakeasyMetadata()
    deleteFile?: boolean;

    @SpeakeasyMetadata()
    killProcess?: boolean;

    @SpeakeasyMetadata()
    locateFile?: string;

    @SpeakeasyMetadata()
    runCommand?: string;

    @SpeakeasyMetadata()
    searchByPath?: string;

    @SpeakeasyMetadata()
    searchForProcess?: string;

    @SpeakeasyMetadata()
    spotlightSearch?: string;

    @SpeakeasyMetadata()
    updateLocateDatabase?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationXMLGeneralCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the category
     */
    @SpeakeasyMetadata()
    name: string;
}

export enum FindPoliciesByNameSubset200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOnDay {
    Sun = "Sun",
    Mon = "Mon",
    Tue = "Tue",
    Wed = "Wed",
    Thu = "Thu",
    Fri = "Fri",
    Sat = "Sat",
}

export class FindPoliciesByNameSubset200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOn extends SpeakeasyBase {
    @SpeakeasyMetadata()
    day?: FindPoliciesByNameSubset200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOnDay;
}

export class FindPoliciesByNameSubset200ApplicationXMLGeneralDateTimeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    activationDate?: string;

    @SpeakeasyMetadata()
    activationDateEpoch?: number;

    @SpeakeasyMetadata()
    activationDateUtc?: string;

    @SpeakeasyMetadata()
    expirationDate?: string;

    @SpeakeasyMetadata()
    expirationDateEpoch?: number;

    @SpeakeasyMetadata()
    expirationDateUtc?: string;

    @SpeakeasyMetadata()
    noExecuteEnd?: string;

    @SpeakeasyMetadata()
    noExecuteOn?: FindPoliciesByNameSubset200ApplicationXMLGeneralDateTimeLimitationsNoExecuteOn;

    @SpeakeasyMetadata()
    noExecuteStart?: string;
}

export enum FindPoliciesByNameSubset200ApplicationXMLGeneralFrequency {
    OncePerComputer = "Once per computer",
    OncePerUserPerComputer = "Once per user per computer",
    OncePerUser = "Once per user",
    OnceEveryDay = "Once every day",
    OnceEveryWeek = "Once every week",
    OnceEveryMonth = "Once every month",
    Ongoing = "Ongoing",
}

export enum FindPoliciesByNameSubset200ApplicationXMLGeneralNetworkLimitationsMinimumNetworkConnection {
    NoMinimum = "No Minimum",
    Ethernet = "Ethernet",
}

export class FindPoliciesByNameSubset200ApplicationXMLGeneralNetworkLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    anyIpAddress?: boolean;

    @SpeakeasyMetadata()
    minimumNetworkConnection?: FindPoliciesByNameSubset200ApplicationXMLGeneralNetworkLimitationsMinimumNetworkConnection;
}

export enum FindPoliciesByNameSubset200ApplicationXMLGeneralNetworkRequirements {
    Any = "Any",
    Ethernet = "Ethernet",
}

export class FindPoliciesByNameSubset200ApplicationXMLGeneralOverrideDefaultSettings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    distributionPoint?: string;

    @SpeakeasyMetadata()
    forceAfpSmb?: boolean;

    @SpeakeasyMetadata()
    sus?: string;

    @SpeakeasyMetadata()
    targetDrive?: string;
}

export enum FindPoliciesByNameSubset200ApplicationXMLGeneralRetryEvent {
    None = "none",
    Trigger = "trigger",
    CheckIn = "check-in",
}

export class FindPoliciesByNameSubset200ApplicationXMLGeneralSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    name: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    category?: FindPoliciesByNameSubset200ApplicationXMLGeneralCategory;

    @SpeakeasyMetadata()
    dateTimeLimitations?: FindPoliciesByNameSubset200ApplicationXMLGeneralDateTimeLimitations;

    @SpeakeasyMetadata()
    enabled?: boolean;

    @SpeakeasyMetadata()
    frequency?: FindPoliciesByNameSubset200ApplicationXMLGeneralFrequency;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    locationUserOnly?: boolean;

    @SpeakeasyMetadata()
    name: string;

    @SpeakeasyMetadata()
    networkLimitations?: FindPoliciesByNameSubset200ApplicationXMLGeneralNetworkLimitations;

    @SpeakeasyMetadata()
    networkRequirements?: FindPoliciesByNameSubset200ApplicationXMLGeneralNetworkRequirements;

    @SpeakeasyMetadata()
    notifyOnEachFailedRetry?: boolean;

    @SpeakeasyMetadata()
    offline?: boolean;

    @SpeakeasyMetadata()
    overrideDefaultSettings?: FindPoliciesByNameSubset200ApplicationXMLGeneralOverrideDefaultSettings;

    @SpeakeasyMetadata()
    retryAttempts?: number;

    @SpeakeasyMetadata()
    retryEvent?: FindPoliciesByNameSubset200ApplicationXMLGeneralRetryEvent;

    @SpeakeasyMetadata()
    site?: FindPoliciesByNameSubset200ApplicationXMLGeneralSite;

    @SpeakeasyMetadata()
    targetDrive?: string;

    @SpeakeasyMetadata()
    trigger?: string;

    @SpeakeasyMetadata()
    triggerCheckin?: boolean;

    @SpeakeasyMetadata()
    triggerEnrollmentComplete?: boolean;

    @SpeakeasyMetadata()
    triggerLogin?: boolean;

    @SpeakeasyMetadata()
    triggerLogout?: boolean;

    @SpeakeasyMetadata()
    triggerNetworkStateChanged?: boolean;

    @SpeakeasyMetadata()
    triggerOther?: string;

    @SpeakeasyMetadata()
    triggerStartup?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationXMLMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata()
    byhost?: boolean;

    @SpeakeasyMetadata()
    heal?: boolean;

    @SpeakeasyMetadata()
    installAllCachedPackages?: boolean;

    @SpeakeasyMetadata()
    permissions?: boolean;

    @SpeakeasyMetadata()
    prebindings?: boolean;

    @SpeakeasyMetadata()
    recon?: boolean;

    @SpeakeasyMetadata()
    resetName?: boolean;

    @SpeakeasyMetadata()
    systemCache?: boolean;

    @SpeakeasyMetadata()
    userCache?: boolean;

    @SpeakeasyMetadata()
    verify?: boolean;
}

export enum FindPoliciesByNameSubset200ApplicationXMLPackageConfigurationPackagesPackageAction {
    Install = "Install",
    Cache = "Cache",
    InstallCached = "Install Cached",
}

export class FindPoliciesByNameSubset200ApplicationXMLPackageConfigurationPackagesPackage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesByNameSubset200ApplicationXMLPackageConfigurationPackagesPackageAction;

    @SpeakeasyMetadata()
    feu?: boolean;

    @SpeakeasyMetadata()
    fut?: boolean;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    updateAutorun?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationXMLPackageConfigurationPackages extends SpeakeasyBase {
    @SpeakeasyMetadata()
    package?: FindPoliciesByNameSubset200ApplicationXMLPackageConfigurationPackagesPackage;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationXMLPackageConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLPackageConfigurationPackages,
    })
    packages?: FindPoliciesByNameSubset200ApplicationXMLPackageConfigurationPackages[];
}

export enum FindPoliciesByNameSubset200ApplicationXMLPrintersPrinterAction {
    Install = "install",
    Uninstall = "uninstall",
}

export class FindPoliciesByNameSubset200ApplicationXMLPrintersPrinter extends SpeakeasyBase {
    @SpeakeasyMetadata()
    action?: FindPoliciesByNameSubset200ApplicationXMLPrintersPrinterAction;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    makeDefault?: boolean;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLPrinters extends SpeakeasyBase {
    @SpeakeasyMetadata()
    leaveExistingDefault?: string;

    @SpeakeasyMetadata()
    printer?: FindPoliciesByNameSubset200ApplicationXMLPrintersPrinter;

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    building?: FindPoliciesByNameSubset200ApplicationXMLScopeBuildingsBuilding;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computerGroup?: FindPoliciesByNameSubset200ApplicationXMLScopeComputerGroupsComputerGroup;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    udid?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computer?: FindPoliciesByNameSubset200ApplicationXMLScopeComputersComputer;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    department?: FindPoliciesByNameSubset200ApplicationXMLScopeDepartmentsDepartment;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    building?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsBuildingsBuilding;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computerGroup?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputerGroupsComputerGroup;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    udid?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computer?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputersComputer;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    department?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsDepartmentsDepartment;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    ibeacon?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsIbeaconsIbeacon;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the network segment
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    uid?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    networkSegment?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    userGroup?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUserGroupsUserGroup;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    user?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUsersUser;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeExclusions extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsBuildings,
    })
    buildings?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsBuildings[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputerGroups,
    })
    computerGroups?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputerGroups[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputers,
    })
    computers?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsComputers[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsDepartments,
    })
    departments?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsDepartments[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsIbeacons,
    })
    ibeacons?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsNetworkSegments,
    })
    networkSegments?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsNetworkSegments[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUserGroups,
    })
    userGroups?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUserGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUsers })
    users?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusionsUsers[];
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitToUsersUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    userGroup?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitToUsers extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeLimitToUsersUserGroups,
    })
    userGroups?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitToUsersUserGroups[];
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    ibeacon?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsIbeaconsIbeacon;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    networkSegment?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    userGroup?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUserGroupsUserGroup;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    user?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUsersUser;
}

export class FindPoliciesByNameSubset200ApplicationXMLScopeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsIbeacons,
    })
    ibeacons?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsNetworkSegments,
    })
    networkSegments?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsNetworkSegments[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUserGroups,
    })
    userGroups?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUserGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUsers })
    users?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitationsUsers[];
}

export class FindPoliciesByNameSubset200ApplicationXMLScope extends SpeakeasyBase {
    @SpeakeasyMetadata()
    allComputers?: boolean;

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLScopeBuildings })
    buildings?: FindPoliciesByNameSubset200ApplicationXMLScopeBuildings[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLScopeComputerGroups })
    computerGroups?: FindPoliciesByNameSubset200ApplicationXMLScopeComputerGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLScopeComputers })
    computers?: FindPoliciesByNameSubset200ApplicationXMLScopeComputers[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLScopeDepartments })
    departments?: FindPoliciesByNameSubset200ApplicationXMLScopeDepartments[];

    @SpeakeasyMetadata()
    exclusions?: FindPoliciesByNameSubset200ApplicationXMLScopeExclusions;

    @SpeakeasyMetadata()
    limitToUsers?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitToUsers;

    @SpeakeasyMetadata()
    limitations?: FindPoliciesByNameSubset200ApplicationXMLScopeLimitations;
}

export enum FindPoliciesByNameSubset200ApplicationXMLScriptsScriptPriority {
    Before = "Before",
    After = "After",
}

export class FindPoliciesByNameSubset200ApplicationXMLScriptsScript extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    parameter10?: string;

    @SpeakeasyMetadata()
    parameter11?: string;

    @SpeakeasyMetadata()
    parameter4?: string;

    @SpeakeasyMetadata()
    parameter5?: string;

    @SpeakeasyMetadata()
    parameter6?: string;

    @SpeakeasyMetadata()
    parameter7?: string;

    @SpeakeasyMetadata()
    parameter8?: string;

    @SpeakeasyMetadata()
    parameter9?: string;

    @SpeakeasyMetadata()
    priority?: FindPoliciesByNameSubset200ApplicationXMLScriptsScriptPriority;
}

export class FindPoliciesByNameSubset200ApplicationXMLScripts extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLScriptsScript })
    script?: FindPoliciesByNameSubset200ApplicationXMLScriptsScript[];

    @SpeakeasyMetadata()
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationXMLSelfServiceSelfServiceCategoriesCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    displayIn?: boolean;

    @SpeakeasyMetadata()
    featureIn?: boolean;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLSelfServiceSelfServiceCategories extends SpeakeasyBase {
    @SpeakeasyMetadata()
    category?: FindPoliciesByNameSubset200ApplicationXMLSelfServiceSelfServiceCategoriesCategory;
}

export class FindPoliciesByNameSubset200ApplicationXMLSelfServiceSelfServiceIcon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    filename?: string;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    uri?: string;
}

export class FindPoliciesByNameSubset200ApplicationXMLSelfService extends SpeakeasyBase {
    @SpeakeasyMetadata()
    featureOnMainPage?: boolean;

    @SpeakeasyMetadata()
    forceUsersToViewDescription?: boolean;

    @SpeakeasyMetadata()
    installButtonText?: string;

    @SpeakeasyMetadata()
    reInstallButtonText?: string;

    @SpeakeasyMetadata()
    selfServiceCategories?: FindPoliciesByNameSubset200ApplicationXMLSelfServiceSelfServiceCategories;

    @SpeakeasyMetadata()
    selfServiceDescription?: string;

    @SpeakeasyMetadata()
    selfServiceDisplayName?: string;

    @SpeakeasyMetadata()
    selfServiceIcon?: FindPoliciesByNameSubset200ApplicationXMLSelfServiceSelfServiceIcon;

    @SpeakeasyMetadata()
    useForSelfService?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationXMLUserInteraction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    allowDeferralMinutes?: number;

    @SpeakeasyMetadata()
    allowDeferralUntilUtc?: string;

    @SpeakeasyMetadata()
    allowUserToDefer?: boolean;

    @SpeakeasyMetadata()
    messageFinish?: string;

    @SpeakeasyMetadata()
    messageStart?: string;
}

/**
 * OK
 */
export class FindPoliciesByNameSubset200ApplicationXML extends SpeakeasyBase {
    @SpeakeasyMetadata()
    accountMaintenance?: FindPoliciesByNameSubset200ApplicationXMLAccountMaintenance;

    @SpeakeasyMetadata()
    diskEncryption?: FindPoliciesByNameSubset200ApplicationXMLDiskEncryption;

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLDockItems })
    dockItems?: FindPoliciesByNameSubset200ApplicationXMLDockItems[];

    @SpeakeasyMetadata()
    filesProcesses?: FindPoliciesByNameSubset200ApplicationXMLFilesProcesses;

    @SpeakeasyMetadata()
    general?: FindPoliciesByNameSubset200ApplicationXMLGeneral;

    @SpeakeasyMetadata()
    maintenance?: FindPoliciesByNameSubset200ApplicationXMLMaintenance;

    @SpeakeasyMetadata()
    packageConfiguration?: FindPoliciesByNameSubset200ApplicationXMLPackageConfiguration;

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationXMLPrinters })
    printers?: FindPoliciesByNameSubset200ApplicationXMLPrinters[];

    @SpeakeasyMetadata()
    scope?: FindPoliciesByNameSubset200ApplicationXMLScope;

    @SpeakeasyMetadata()
    scripts?: FindPoliciesByNameSubset200ApplicationXMLScripts;

    @SpeakeasyMetadata()
    selfService?: FindPoliciesByNameSubset200ApplicationXMLSelfService;

    @SpeakeasyMetadata()
    userInteraction?: FindPoliciesByNameSubset200ApplicationXMLUserInteraction;
}

export enum FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccountsAccountAction {
    Create = "Create",
    Reset = "Reset",
    Delete = "Delete",
    DisableFileVault = "DisableFileVault",
}

export class FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccountsAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccountsAccountAction;

    @SpeakeasyMetadata()
    @Expose({ name: "admin" })
    admin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "archive_home_directory" })
    archiveHomeDirectory?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "archive_home_directory_to" })
    archiveHomeDirectoryTo?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "filevault_enabled" })
    filevaultEnabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "home" })
    home?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "password" })
    password?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "picture" })
    picture?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "realname" })
    realname?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "username" })
    username?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccounts extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "account" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccountsAccount)
    account?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccountsAccount;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceDirectoryBindingsBinding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceDirectoryBindings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "binding" })
    @Type(
        () => FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceDirectoryBindingsBinding
    )
    binding?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceDirectoryBindingsBinding;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export enum FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceManagementAccountAction {
    Specified = "specified",
    Random = "random",
    Reset = "reset",
    FileVaultEnable = "fileVaultEnable",
    FileVaultDisable = "fileVaultDisable",
}

export class FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceManagementAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceManagementAccountAction;

    @SpeakeasyMetadata()
    @Expose({ name: "managed_password" })
    managedPassword?: string;

    /**
     * Only necessary when utilizing the random action
     */
    @SpeakeasyMetadata()
    @Expose({ name: "managed_password_length" })
    managedPasswordLength?: number;
}

export enum FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPasswordOfMode {
    Command = "command",
    None = "none",
}

export class FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPassword extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "of_mode" })
    ofMode?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPasswordOfMode;

    @SpeakeasyMetadata()
    @Expose({ name: "of_password" })
    ofPassword?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONAccountMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccounts,
    })
    @Expose({ name: "accounts" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccounts)
    accounts?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceAccounts[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceDirectoryBindings,
    })
    @Expose({ name: "directory_bindings" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceDirectoryBindings)
    directoryBindings?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceDirectoryBindings[];

    @SpeakeasyMetadata()
    @Expose({ name: "management_account" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceManagementAccount)
    managementAccount?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceManagementAccount;

    @SpeakeasyMetadata()
    @Expose({ name: "open_firmware_efi_password" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPassword)
    openFirmwareEfiPassword?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenanceOpenFirmwareEfiPassword;
}

export enum FindPoliciesByNameSubset200ApplicationJSONDiskEncryptionAction {
    Apply = "apply",
    Remediate = "remediate",
}

export enum FindPoliciesByNameSubset200ApplicationJSONDiskEncryptionRemediateKeyType {
    Individual = "Individual",
    Institutional = "Institutional",
    IndividualAndInstitutional = "Individual And Institutional",
}

export class FindPoliciesByNameSubset200ApplicationJSONDiskEncryption extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesByNameSubset200ApplicationJSONDiskEncryptionAction;

    @SpeakeasyMetadata()
    @Expose({ name: "auth_restart" })
    authRestart?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "disk_encryption_configuration_id" })
    diskEncryptionConfigurationId?: number;

    /**
     * disk encryption ID to utilize for remediating institutional recovery key types.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remediate_disk_encryption_configuration_id" })
    remediateDiskEncryptionConfigurationId?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "remediate_key_type" })
    remediateKeyType?: FindPoliciesByNameSubset200ApplicationJSONDiskEncryptionRemediateKeyType;
}

export enum FindPoliciesByNameSubset200ApplicationJSONDockItemsDockItemAction {
    AddToBeginning = "Add To Beginning",
    AddToEnd = "Add To End",
    Remove = "Remove",
}

export class FindPoliciesByNameSubset200ApplicationJSONDockItemsDockItem extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesByNameSubset200ApplicationJSONDockItemsDockItemAction;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONDockItems extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "dock_item" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONDockItemsDockItem)
    dockItem?: FindPoliciesByNameSubset200ApplicationJSONDockItemsDockItem;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationJSONFilesProcesses extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "delete_file" })
    deleteFile?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "kill_process" })
    killProcess?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "locate_file" })
    locateFile?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "run_command" })
    runCommand?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "search_by_path" })
    searchByPath?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "search_for_process" })
    searchForProcess?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "spotlight_search" })
    spotlightSearch?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "update_locate_database" })
    updateLocateDatabase?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationJSONGeneralCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the category
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

export enum FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOnDay {
    Sun = "Sun",
    Mon = "Mon",
    Tue = "Tue",
    Wed = "Wed",
    Thu = "Thu",
    Fri = "Fri",
    Sat = "Sat",
}

export class FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOn extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "day" })
    day?: FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOnDay;
}

export class FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "activation_date" })
    activationDate?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "activation_date_epoch" })
    activationDateEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "activation_date_utc" })
    activationDateUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date" })
    expirationDate?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date_epoch" })
    expirationDateEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date_utc" })
    expirationDateUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_end" })
    noExecuteEnd?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_on" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOn)
    noExecuteOn?: FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitationsNoExecuteOn;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_start" })
    noExecuteStart?: string;
}

export enum FindPoliciesByNameSubset200ApplicationJSONGeneralFrequency {
    OncePerComputer = "Once per computer",
    OncePerUserPerComputer = "Once per user per computer",
    OncePerUser = "Once per user",
    OnceEveryDay = "Once every day",
    OnceEveryWeek = "Once every week",
    OnceEveryMonth = "Once every month",
    Ongoing = "Ongoing",
}

export enum FindPoliciesByNameSubset200ApplicationJSONGeneralNetworkLimitationsMinimumNetworkConnection {
    NoMinimum = "No Minimum",
    Ethernet = "Ethernet",
}

export class FindPoliciesByNameSubset200ApplicationJSONGeneralNetworkLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "any_ip_address" })
    anyIpAddress?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "minimum_network_connection" })
    minimumNetworkConnection?: FindPoliciesByNameSubset200ApplicationJSONGeneralNetworkLimitationsMinimumNetworkConnection;
}

export enum FindPoliciesByNameSubset200ApplicationJSONGeneralNetworkRequirements {
    Any = "Any",
    Ethernet = "Ethernet",
}

export class FindPoliciesByNameSubset200ApplicationJSONGeneralOverrideDefaultSettings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "distribution_point" })
    distributionPoint?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "force_afp_smb" })
    forceAfpSmb?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "sus" })
    sus?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "target_drive" })
    targetDrive?: string;
}

export enum FindPoliciesByNameSubset200ApplicationJSONGeneralRetryEvent {
    None = "none",
    Trigger = "trigger",
    CheckIn = "check-in",
}

export class FindPoliciesByNameSubset200ApplicationJSONGeneralSite extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the site
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONGeneralCategory)
    category?: FindPoliciesByNameSubset200ApplicationJSONGeneralCategory;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_limitations" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitations)
    dateTimeLimitations?: FindPoliciesByNameSubset200ApplicationJSONGeneralDateTimeLimitations;

    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "frequency" })
    frequency?: FindPoliciesByNameSubset200ApplicationJSONGeneralFrequency;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "location_user_only" })
    locationUserOnly?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "network_limitations" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONGeneralNetworkLimitations)
    networkLimitations?: FindPoliciesByNameSubset200ApplicationJSONGeneralNetworkLimitations;

    @SpeakeasyMetadata()
    @Expose({ name: "network_requirements" })
    networkRequirements?: FindPoliciesByNameSubset200ApplicationJSONGeneralNetworkRequirements;

    @SpeakeasyMetadata()
    @Expose({ name: "notify_on_each_failed_retry" })
    notifyOnEachFailedRetry?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "offline" })
    offline?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "override_default_settings" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONGeneralOverrideDefaultSettings)
    overrideDefaultSettings?: FindPoliciesByNameSubset200ApplicationJSONGeneralOverrideDefaultSettings;

    @SpeakeasyMetadata()
    @Expose({ name: "retry_attempts" })
    retryAttempts?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "retry_event" })
    retryEvent?: FindPoliciesByNameSubset200ApplicationJSONGeneralRetryEvent;

    @SpeakeasyMetadata()
    @Expose({ name: "site" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONGeneralSite)
    site?: FindPoliciesByNameSubset200ApplicationJSONGeneralSite;

    @SpeakeasyMetadata()
    @Expose({ name: "target_drive" })
    targetDrive?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger" })
    trigger?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_checkin" })
    triggerCheckin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_enrollment_complete" })
    triggerEnrollmentComplete?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_login" })
    triggerLogin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_logout" })
    triggerLogout?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_network_state_changed" })
    triggerNetworkStateChanged?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_other" })
    triggerOther?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_startup" })
    triggerStartup?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationJSONMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "byhost" })
    byhost?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "heal" })
    heal?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "install_all_cached_packages" })
    installAllCachedPackages?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "permissions" })
    permissions?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "prebindings" })
    prebindings?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "recon" })
    recon?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "reset_name" })
    resetName?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "system_cache" })
    systemCache?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "user_cache" })
    userCache?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "verify" })
    verify?: boolean;
}

export enum FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackagesPackageAction {
    Install = "Install",
    Cache = "Cache",
    InstallCached = "Install Cached",
}

export class FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackagesPackage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackagesPackageAction;

    @SpeakeasyMetadata()
    @Expose({ name: "feu" })
    feu?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "fut" })
    fut?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "update_autorun" })
    updateAutorun?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackages extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "package" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackagesPackage)
    package?: FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackagesPackage;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationJSONPackageConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackages,
    })
    @Expose({ name: "packages" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackages)
    packages?: FindPoliciesByNameSubset200ApplicationJSONPackageConfigurationPackages[];
}

export enum FindPoliciesByNameSubset200ApplicationJSONPrintersPrinterAction {
    Install = "install",
    Uninstall = "uninstall",
}

export class FindPoliciesByNameSubset200ApplicationJSONPrintersPrinter extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: FindPoliciesByNameSubset200ApplicationJSONPrintersPrinterAction;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "make_default" })
    makeDefault?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONPrinters extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "leave_existing_default" })
    leaveExistingDefault?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "printer" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONPrintersPrinter)
    printer?: FindPoliciesByNameSubset200ApplicationJSONPrintersPrinter;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeBuildingsBuilding)
    building?: FindPoliciesByNameSubset200ApplicationJSONScopeBuildingsBuilding;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer_group" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeComputerGroupsComputerGroup)
    computerGroup?: FindPoliciesByNameSubset200ApplicationJSONScopeComputerGroupsComputerGroup;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeComputersComputer)
    computer?: FindPoliciesByNameSubset200ApplicationJSONScopeComputersComputer;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeDepartmentsDepartment)
    department?: FindPoliciesByNameSubset200ApplicationJSONScopeDepartmentsDepartment;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsBuildingsBuilding extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsBuildingsBuilding)
    building?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsBuildingsBuilding;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputerGroupsComputerGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer_group" })
    @Type(
        () => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputerGroupsComputerGroup
    )
    computerGroup?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputerGroupsComputerGroup;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputersComputer)
    computer?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputersComputer;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsDepartmentsDepartment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsDepartmentsDepartment)
    department?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsDepartmentsDepartment;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ibeacon" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsIbeaconsIbeacon)
    ibeacon?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsIbeaconsIbeacon;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the network segment
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uid" })
    uid?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(
        () => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsNetworkSegmentsNetworkSegment
    )
    networkSegment?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUserGroupsUserGroup)
    userGroup?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUserGroupsUserGroup;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUsersUser)
    user?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUsersUser;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeExclusions extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsBuildings,
    })
    @Expose({ name: "buildings" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsBuildings)
    buildings?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsBuildings[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputerGroups,
    })
    @Expose({ name: "computer_groups" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputerGroups)
    computerGroups?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputerGroups[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputers,
    })
    @Expose({ name: "computers" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputers)
    computers?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsComputers[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsDepartments,
    })
    @Expose({ name: "departments" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsDepartments)
    departments?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsDepartments[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsIbeacons,
    })
    @Expose({ name: "ibeacons" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsIbeacons)
    ibeacons?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsNetworkSegments,
    })
    @Expose({ name: "network_segments" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsNetworkSegments)
    networkSegments?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsNetworkSegments[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUserGroups,
    })
    @Expose({ name: "user_groups" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUserGroups)
    userGroups?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUserGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUsers })
    @Expose({ name: "users" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUsers)
    users?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusionsUsers[];
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitToUsersUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    userGroup?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitToUsers extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeLimitToUsersUserGroups,
    })
    @Expose({ name: "user_groups" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitToUsersUserGroups)
    userGroups?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitToUsersUserGroups[];
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsIbeaconsIbeacon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ibeacon" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsIbeaconsIbeacon)
    ibeacon?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsIbeaconsIbeacon;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(
        () =>
            FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsNetworkSegmentsNetworkSegment
    )
    networkSegment?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsNetworkSegmentsNetworkSegment;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUserGroupsUserGroup extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUserGroupsUserGroup)
    userGroup?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUserGroupsUserGroup;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUsersUser)
    user?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUsersUser;
}

export class FindPoliciesByNameSubset200ApplicationJSONScopeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsIbeacons,
    })
    @Expose({ name: "ibeacons" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsIbeacons)
    ibeacons?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsIbeacons[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsNetworkSegments,
    })
    @Expose({ name: "network_segments" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsNetworkSegments)
    networkSegments?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsNetworkSegments[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUserGroups,
    })
    @Expose({ name: "user_groups" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUserGroups)
    userGroups?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUserGroups[];

    @SpeakeasyMetadata({
        elemType: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUsers,
    })
    @Expose({ name: "users" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUsers)
    users?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitationsUsers[];
}

export class FindPoliciesByNameSubset200ApplicationJSONScope extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "all_computers" })
    allComputers?: boolean;

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONScopeBuildings })
    @Expose({ name: "buildings" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeBuildings)
    buildings?: FindPoliciesByNameSubset200ApplicationJSONScopeBuildings[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONScopeComputerGroups })
    @Expose({ name: "computer_groups" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeComputerGroups)
    computerGroups?: FindPoliciesByNameSubset200ApplicationJSONScopeComputerGroups[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONScopeComputers })
    @Expose({ name: "computers" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeComputers)
    computers?: FindPoliciesByNameSubset200ApplicationJSONScopeComputers[];

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONScopeDepartments })
    @Expose({ name: "departments" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeDepartments)
    departments?: FindPoliciesByNameSubset200ApplicationJSONScopeDepartments[];

    @SpeakeasyMetadata()
    @Expose({ name: "exclusions" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeExclusions)
    exclusions?: FindPoliciesByNameSubset200ApplicationJSONScopeExclusions;

    @SpeakeasyMetadata()
    @Expose({ name: "limit_to_users" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitToUsers)
    limitToUsers?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitToUsers;

    @SpeakeasyMetadata()
    @Expose({ name: "limitations" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScopeLimitations)
    limitations?: FindPoliciesByNameSubset200ApplicationJSONScopeLimitations;
}

export enum FindPoliciesByNameSubset200ApplicationJSONScriptsScriptPriority {
    Before = "Before",
    After = "After",
}

export class FindPoliciesByNameSubset200ApplicationJSONScriptsScript extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter10" })
    parameter10?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter11" })
    parameter11?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter4" })
    parameter4?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter5" })
    parameter5?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter6" })
    parameter6?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter7" })
    parameter7?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter8" })
    parameter8?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter9" })
    parameter9?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "priority" })
    priority?: FindPoliciesByNameSubset200ApplicationJSONScriptsScriptPriority;
}

export class FindPoliciesByNameSubset200ApplicationJSONScripts extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONScriptsScript })
    @Expose({ name: "script" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScriptsScript)
    script?: FindPoliciesByNameSubset200ApplicationJSONScriptsScript[];

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceCategoriesCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "display_in" })
    displayIn?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "feature_in" })
    featureIn?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceCategories extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceCategoriesCategory)
    category?: FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceCategoriesCategory;
}

export class FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceIcon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "filename" })
    filename?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class FindPoliciesByNameSubset200ApplicationJSONSelfService extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "feature_on_main_page" })
    featureOnMainPage?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "force_users_to_view_description" })
    forceUsersToViewDescription?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "install_button_text" })
    installButtonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "re-install_button_text" })
    reInstallButtonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_categories" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceCategories)
    selfServiceCategories?: FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceCategories;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_description" })
    selfServiceDescription?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_display_name" })
    selfServiceDisplayName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_icon" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceIcon)
    selfServiceIcon?: FindPoliciesByNameSubset200ApplicationJSONSelfServiceSelfServiceIcon;

    @SpeakeasyMetadata()
    @Expose({ name: "use_for_self_service" })
    useForSelfService?: boolean;
}

export class FindPoliciesByNameSubset200ApplicationJSONUserInteraction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "allow_deferral_minutes" })
    allowDeferralMinutes?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "allow_deferral_until_utc" })
    allowDeferralUntilUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "allow_user_to_defer" })
    allowUserToDefer?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "message_finish" })
    messageFinish?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "message_start" })
    messageStart?: string;
}

/**
 * OK
 */
export class FindPoliciesByNameSubset200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "account_maintenance" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONAccountMaintenance)
    accountMaintenance?: FindPoliciesByNameSubset200ApplicationJSONAccountMaintenance;

    @SpeakeasyMetadata()
    @Expose({ name: "disk_encryption" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONDiskEncryption)
    diskEncryption?: FindPoliciesByNameSubset200ApplicationJSONDiskEncryption;

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONDockItems })
    @Expose({ name: "dock_items" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONDockItems)
    dockItems?: FindPoliciesByNameSubset200ApplicationJSONDockItems[];

    @SpeakeasyMetadata()
    @Expose({ name: "files_processes" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONFilesProcesses)
    filesProcesses?: FindPoliciesByNameSubset200ApplicationJSONFilesProcesses;

    @SpeakeasyMetadata()
    @Expose({ name: "general" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONGeneral)
    general?: FindPoliciesByNameSubset200ApplicationJSONGeneral;

    @SpeakeasyMetadata()
    @Expose({ name: "maintenance" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONMaintenance)
    maintenance?: FindPoliciesByNameSubset200ApplicationJSONMaintenance;

    @SpeakeasyMetadata()
    @Expose({ name: "package_configuration" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONPackageConfiguration)
    packageConfiguration?: FindPoliciesByNameSubset200ApplicationJSONPackageConfiguration;

    @SpeakeasyMetadata({ elemType: FindPoliciesByNameSubset200ApplicationJSONPrinters })
    @Expose({ name: "printers" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONPrinters)
    printers?: FindPoliciesByNameSubset200ApplicationJSONPrinters[];

    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScope)
    scope?: FindPoliciesByNameSubset200ApplicationJSONScope;

    @SpeakeasyMetadata()
    @Expose({ name: "scripts" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONScripts)
    scripts?: FindPoliciesByNameSubset200ApplicationJSONScripts;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONSelfService)
    selfService?: FindPoliciesByNameSubset200ApplicationJSONSelfService;

    @SpeakeasyMetadata()
    @Expose({ name: "user_interaction" })
    @Type(() => FindPoliciesByNameSubset200ApplicationJSONUserInteraction)
    userInteraction?: FindPoliciesByNameSubset200ApplicationJSONUserInteraction;
}

export class FindPoliciesByNameSubsetResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    body?: Uint8Array;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    findPoliciesByNameSubset200ApplicationJSONObject?: FindPoliciesByNameSubset200ApplicationJSON;
}
