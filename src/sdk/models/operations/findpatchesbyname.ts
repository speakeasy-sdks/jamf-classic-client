/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FindPatchesByNameRequest extends SpeakeasyBase {
    /**
     * Name to filter by
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=name" })
    name: string;
}

export class FindPatchesByName200ApplicationXMLCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the category
     */
    @SpeakeasyMetadata()
    name: string;

    @SpeakeasyMetadata()
    priority?: number;
}

export class FindPatchesByName200ApplicationXMLNotifications extends SpeakeasyBase {
    @SpeakeasyMetadata()
    emailNotification?: boolean;

    @SpeakeasyMetadata()
    jssNotification?: boolean;
}

export class FindPatchesByName200ApplicationXMLVersionsVersionComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    altMacAddress?: string;

    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    macAddress?: string;

    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    serialNumber?: string;
}

export class FindPatchesByName200ApplicationXMLVersionsVersionComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    computer?: FindPatchesByName200ApplicationXMLVersionsVersionComputersComputer;
}

export class FindPatchesByName200ApplicationXMLVersionsVersionPackage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    id?: number;

    @SpeakeasyMetadata()
    name?: string;
}

export class FindPatchesByName200ApplicationXMLVersionsVersion extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPatchesByName200ApplicationXMLVersionsVersionComputers })
    computers?: FindPatchesByName200ApplicationXMLVersionsVersionComputers[];

    @SpeakeasyMetadata()
    package?: FindPatchesByName200ApplicationXMLVersionsVersionPackage;

    @SpeakeasyMetadata()
    size?: number;

    @SpeakeasyMetadata()
    softwareVersion?: string;
}

export class FindPatchesByName200ApplicationXMLVersions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    version?: FindPatchesByName200ApplicationXMLVersionsVersion;
}

/**
 * OK
 */
export class FindPatchesByName200ApplicationXML extends SpeakeasyBase {
    @SpeakeasyMetadata()
    category?: FindPatchesByName200ApplicationXMLCategory;

    @SpeakeasyMetadata()
    id?: number;

    /**
     * Name of the patch software title
     */
    @SpeakeasyMetadata()
    name?: string;

    @SpeakeasyMetadata()
    notifications?: FindPatchesByName200ApplicationXMLNotifications;

    @SpeakeasyMetadata()
    totalComputers?: number;

    @SpeakeasyMetadata()
    totalVersions?: number;

    @SpeakeasyMetadata({ elemType: FindPatchesByName200ApplicationXMLVersions })
    versions?: FindPatchesByName200ApplicationXMLVersions[];
}

export class FindPatchesByName200ApplicationJSONCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the category
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "priority" })
    priority?: number;
}

export class FindPatchesByName200ApplicationJSONNotifications extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "email_notification" })
    emailNotification?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "jss_notification" })
    jssNotification?: boolean;
}

export class FindPatchesByName200ApplicationJSONVersionsVersionComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "alt_mac_address" })
    altMacAddress?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "mac_address" })
    macAddress?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "serial_number" })
    serialNumber?: string;
}

export class FindPatchesByName200ApplicationJSONVersionsVersionComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => FindPatchesByName200ApplicationJSONVersionsVersionComputersComputer)
    computer?: FindPatchesByName200ApplicationJSONVersionsVersionComputersComputer;
}

export class FindPatchesByName200ApplicationJSONVersionsVersionPackage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class FindPatchesByName200ApplicationJSONVersionsVersion extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FindPatchesByName200ApplicationJSONVersionsVersionComputers })
    @Expose({ name: "computers" })
    @Type(() => FindPatchesByName200ApplicationJSONVersionsVersionComputers)
    computers?: FindPatchesByName200ApplicationJSONVersionsVersionComputers[];

    @SpeakeasyMetadata()
    @Expose({ name: "package" })
    @Type(() => FindPatchesByName200ApplicationJSONVersionsVersionPackage)
    package?: FindPatchesByName200ApplicationJSONVersionsVersionPackage;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "software_version" })
    softwareVersion?: string;
}

export class FindPatchesByName200ApplicationJSONVersions extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    @Type(() => FindPatchesByName200ApplicationJSONVersionsVersion)
    version?: FindPatchesByName200ApplicationJSONVersionsVersion;
}

/**
 * OK
 */
export class FindPatchesByName200ApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => FindPatchesByName200ApplicationJSONCategory)
    category?: FindPatchesByName200ApplicationJSONCategory;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the patch software title
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "notifications" })
    @Type(() => FindPatchesByName200ApplicationJSONNotifications)
    notifications?: FindPatchesByName200ApplicationJSONNotifications;

    @SpeakeasyMetadata()
    @Expose({ name: "total_computers" })
    totalComputers?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "total_versions" })
    totalVersions?: number;

    @SpeakeasyMetadata({ elemType: FindPatchesByName200ApplicationJSONVersions })
    @Expose({ name: "versions" })
    @Type(() => FindPatchesByName200ApplicationJSONVersions)
    versions?: FindPatchesByName200ApplicationJSONVersions[];
}

export class FindPatchesByNameResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    body?: Uint8Array;

    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    findPatchesByName200ApplicationJSONObject?: FindPatchesByName200ApplicationJSON;
}
