/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CategoryObject } from "./categoryobject";
import { IdName } from "./idname";
import { SiteObject } from "./siteobject";
import { Expose, Type } from "class-transformer";

export enum PolicyAccountMaintenanceAccountsAccountAction {
    Create = "Create",
    Reset = "Reset",
    Delete = "Delete",
    DisableFileVault = "DisableFileVault",
}

export class PolicyAccountMaintenanceAccountsAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: PolicyAccountMaintenanceAccountsAccountAction;

    @SpeakeasyMetadata()
    @Expose({ name: "admin" })
    admin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "archive_home_directory" })
    archiveHomeDirectory?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "archive_home_directory_to" })
    archiveHomeDirectoryTo?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "filevault_enabled" })
    filevaultEnabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "home" })
    home?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "password" })
    password?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "picture" })
    picture?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "realname" })
    realname?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "username" })
    username?: string;
}

export class PolicyAccountMaintenanceAccounts extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "account" })
    @Type(() => PolicyAccountMaintenanceAccountsAccount)
    account?: PolicyAccountMaintenanceAccountsAccount;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class PolicyAccountMaintenanceDirectoryBindings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "binding" })
    @Type(() => IdName)
    binding?: IdName;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export enum PolicyAccountMaintenanceManagementAccountAction {
    Specified = "specified",
    Random = "random",
    Reset = "reset",
    FileVaultEnable = "fileVaultEnable",
    FileVaultDisable = "fileVaultDisable",
}

export class PolicyAccountMaintenanceManagementAccount extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: PolicyAccountMaintenanceManagementAccountAction;

    @SpeakeasyMetadata()
    @Expose({ name: "managed_password" })
    managedPassword?: string;

    /**
     * Only necessary when utilizing the random action
     */
    @SpeakeasyMetadata()
    @Expose({ name: "managed_password_length" })
    managedPasswordLength?: number;
}

export enum PolicyAccountMaintenanceOpenFirmwareEfiPasswordOfMode {
    Command = "command",
    None = "none",
}

export class PolicyAccountMaintenanceOpenFirmwareEfiPassword extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "of_mode" })
    ofMode?: PolicyAccountMaintenanceOpenFirmwareEfiPasswordOfMode;

    @SpeakeasyMetadata()
    @Expose({ name: "of_password" })
    ofPassword?: string;
}

export class PolicyAccountMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PolicyAccountMaintenanceAccounts })
    @Expose({ name: "accounts" })
    @Type(() => PolicyAccountMaintenanceAccounts)
    accounts?: PolicyAccountMaintenanceAccounts[];

    @SpeakeasyMetadata({ elemType: PolicyAccountMaintenanceDirectoryBindings })
    @Expose({ name: "directory_bindings" })
    @Type(() => PolicyAccountMaintenanceDirectoryBindings)
    directoryBindings?: PolicyAccountMaintenanceDirectoryBindings[];

    @SpeakeasyMetadata()
    @Expose({ name: "management_account" })
    @Type(() => PolicyAccountMaintenanceManagementAccount)
    managementAccount?: PolicyAccountMaintenanceManagementAccount;

    @SpeakeasyMetadata()
    @Expose({ name: "open_firmware_efi_password" })
    @Type(() => PolicyAccountMaintenanceOpenFirmwareEfiPassword)
    openFirmwareEfiPassword?: PolicyAccountMaintenanceOpenFirmwareEfiPassword;
}

export enum PolicyDiskEncryptionAction {
    Apply = "apply",
    Remediate = "remediate",
}

export enum PolicyDiskEncryptionRemediateKeyType {
    Individual = "Individual",
    Institutional = "Institutional",
    IndividualAndInstitutional = "Individual And Institutional",
}

export class PolicyDiskEncryption extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: PolicyDiskEncryptionAction;

    @SpeakeasyMetadata()
    @Expose({ name: "auth_restart" })
    authRestart?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "disk_encryption_configuration_id" })
    diskEncryptionConfigurationId?: number;

    /**
     * disk encryption ID to utilize for remediating institutional recovery key types.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remediate_disk_encryption_configuration_id" })
    remediateDiskEncryptionConfigurationId?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "remediate_key_type" })
    remediateKeyType?: PolicyDiskEncryptionRemediateKeyType;
}

export enum PolicyDockItemsDockItemAction {
    AddToBeginning = "Add To Beginning",
    AddToEnd = "Add To End",
    Remove = "Remove",
}

export class PolicyDockItemsDockItem extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: PolicyDockItemsDockItemAction;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class PolicyDockItems extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "dock_item" })
    @Type(() => PolicyDockItemsDockItem)
    dockItem?: PolicyDockItemsDockItem;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class PolicyFilesProcesses extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "delete_file" })
    deleteFile?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "kill_process" })
    killProcess?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "locate_file" })
    locateFile?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "run_command" })
    runCommand?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "search_by_path" })
    searchByPath?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "search_for_process" })
    searchForProcess?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "spotlight_search" })
    spotlightSearch?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "update_locate_database" })
    updateLocateDatabase?: boolean;
}

export enum PolicyGeneralDateTimeLimitationsNoExecuteOnDay {
    Sun = "Sun",
    Mon = "Mon",
    Tue = "Tue",
    Wed = "Wed",
    Thu = "Thu",
    Fri = "Fri",
    Sat = "Sat",
}

export class PolicyGeneralDateTimeLimitationsNoExecuteOn extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "day" })
    day?: PolicyGeneralDateTimeLimitationsNoExecuteOnDay;
}

export class PolicyGeneralDateTimeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "activation_date" })
    activationDate?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "activation_date_epoch" })
    activationDateEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "activation_date_utc" })
    activationDateUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date" })
    expirationDate?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date_epoch" })
    expirationDateEpoch?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "expiration_date_utc" })
    expirationDateUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_end" })
    noExecuteEnd?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_on" })
    @Type(() => PolicyGeneralDateTimeLimitationsNoExecuteOn)
    noExecuteOn?: PolicyGeneralDateTimeLimitationsNoExecuteOn;

    @SpeakeasyMetadata()
    @Expose({ name: "no_execute_start" })
    noExecuteStart?: string;
}

export enum PolicyGeneralFrequency {
    OncePerComputer = "Once per computer",
    OncePerUserPerComputer = "Once per user per computer",
    OncePerUser = "Once per user",
    OnceEveryDay = "Once every day",
    OnceEveryWeek = "Once every week",
    OnceEveryMonth = "Once every month",
    Ongoing = "Ongoing",
}

export enum PolicyGeneralNetworkLimitationsMinimumNetworkConnection {
    NoMinimum = "No Minimum",
    Ethernet = "Ethernet",
}

export class PolicyGeneralNetworkLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "any_ip_address" })
    anyIpAddress?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "minimum_network_connection" })
    minimumNetworkConnection?: PolicyGeneralNetworkLimitationsMinimumNetworkConnection;
}

export enum PolicyGeneralNetworkRequirements {
    Any = "Any",
    Ethernet = "Ethernet",
}

export class PolicyGeneralOverrideDefaultSettings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "distribution_point" })
    distributionPoint?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "force_afp_smb" })
    forceAfpSmb?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "sus" })
    sus?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "target_drive" })
    targetDrive?: string;
}

export enum PolicyGeneralRetryEvent {
    None = "none",
    Trigger = "trigger",
    CheckIn = "check-in",
}

export class PolicyGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => CategoryObject)
    category?: CategoryObject;

    @SpeakeasyMetadata()
    @Expose({ name: "date_time_limitations" })
    @Type(() => PolicyGeneralDateTimeLimitations)
    dateTimeLimitations?: PolicyGeneralDateTimeLimitations;

    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "frequency" })
    frequency?: PolicyGeneralFrequency;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "location_user_only" })
    locationUserOnly?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "network_limitations" })
    @Type(() => PolicyGeneralNetworkLimitations)
    networkLimitations?: PolicyGeneralNetworkLimitations;

    @SpeakeasyMetadata()
    @Expose({ name: "network_requirements" })
    networkRequirements?: PolicyGeneralNetworkRequirements;

    @SpeakeasyMetadata()
    @Expose({ name: "notify_on_each_failed_retry" })
    notifyOnEachFailedRetry?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "offline" })
    offline?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "override_default_settings" })
    @Type(() => PolicyGeneralOverrideDefaultSettings)
    overrideDefaultSettings?: PolicyGeneralOverrideDefaultSettings;

    @SpeakeasyMetadata()
    @Expose({ name: "retry_attempts" })
    retryAttempts?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "retry_event" })
    retryEvent?: PolicyGeneralRetryEvent;

    @SpeakeasyMetadata()
    @Expose({ name: "site" })
    @Type(() => SiteObject)
    site?: SiteObject;

    @SpeakeasyMetadata()
    @Expose({ name: "target_drive" })
    targetDrive?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger" })
    trigger?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_checkin" })
    triggerCheckin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_enrollment_complete" })
    triggerEnrollmentComplete?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_login" })
    triggerLogin?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_logout" })
    triggerLogout?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_network_state_changed" })
    triggerNetworkStateChanged?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_other" })
    triggerOther?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "trigger_startup" })
    triggerStartup?: boolean;
}

export class PolicyMaintenance extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "byhost" })
    byhost?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "heal" })
    heal?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "install_all_cached_packages" })
    installAllCachedPackages?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "permissions" })
    permissions?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "prebindings" })
    prebindings?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "recon" })
    recon?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "reset_name" })
    resetName?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "system_cache" })
    systemCache?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "user_cache" })
    userCache?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "verify" })
    verify?: boolean;
}

export enum PolicyPackageConfigurationPackagesPackageAction {
    Install = "Install",
    Cache = "Cache",
    InstallCached = "Install Cached",
}

export class PolicyPackageConfigurationPackagesPackage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: PolicyPackageConfigurationPackagesPackageAction;

    @SpeakeasyMetadata()
    @Expose({ name: "feu" })
    feu?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "fut" })
    fut?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "update_autorun" })
    updateAutorun?: boolean;
}

export class PolicyPackageConfigurationPackages extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "package" })
    @Type(() => PolicyPackageConfigurationPackagesPackage)
    package?: PolicyPackageConfigurationPackagesPackage;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class PolicyPackageConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PolicyPackageConfigurationPackages })
    @Expose({ name: "packages" })
    @Type(() => PolicyPackageConfigurationPackages)
    packages?: PolicyPackageConfigurationPackages[];
}

export enum PolicyPrintersPrinterAction {
    Install = "install",
    Uninstall = "uninstall",
}

export class PolicyPrintersPrinter extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    action?: PolicyPrintersPrinterAction;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "make_default" })
    makeDefault?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class PolicyPrinters extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "leave_existing_default" })
    leaveExistingDefault?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "printer" })
    @Type(() => PolicyPrintersPrinter)
    printer?: PolicyPrintersPrinter;

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class PolicyScopeBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => IdName)
    building?: IdName;
}

export class PolicyScopeComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer_group" })
    @Type(() => IdName)
    computerGroup?: IdName;
}

export class PolicyScopeComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;
}

export class PolicyScopeComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => PolicyScopeComputersComputer)
    computer?: PolicyScopeComputersComputer;
}

export class PolicyScopeDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => IdName)
    department?: IdName;
}

export class PolicyScopeExclusionsBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => IdName)
    building?: IdName;
}

export class PolicyScopeExclusionsComputerGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer_group" })
    @Type(() => IdName)
    computerGroup?: IdName;
}

export class PolicyScopeExclusionsComputersComputer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the computer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;
}

export class PolicyScopeExclusionsComputers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "computer" })
    @Type(() => PolicyScopeExclusionsComputersComputer)
    computer?: PolicyScopeExclusionsComputersComputer;
}

export class PolicyScopeExclusionsDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => IdName)
    department?: IdName;
}

export class PolicyScopeExclusionsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ibeacon" })
    @Type(() => IdName)
    ibeacon?: IdName;
}

export class PolicyScopeExclusionsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the network segment
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uid" })
    uid?: string;
}

export class PolicyScopeExclusionsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(() => PolicyScopeExclusionsNetworkSegmentsNetworkSegment)
    networkSegment?: PolicyScopeExclusionsNetworkSegmentsNetworkSegment;
}

export class PolicyScopeExclusionsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => IdName)
    userGroup?: IdName;
}

export class PolicyScopeExclusionsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class PolicyScopeExclusionsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => PolicyScopeExclusionsUsersUser)
    user?: PolicyScopeExclusionsUsersUser;
}

export class PolicyScopeExclusions extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsBuildings })
    @Expose({ name: "buildings" })
    @Type(() => PolicyScopeExclusionsBuildings)
    buildings?: PolicyScopeExclusionsBuildings[];

    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsComputerGroups })
    @Expose({ name: "computer_groups" })
    @Type(() => PolicyScopeExclusionsComputerGroups)
    computerGroups?: PolicyScopeExclusionsComputerGroups[];

    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsComputers })
    @Expose({ name: "computers" })
    @Type(() => PolicyScopeExclusionsComputers)
    computers?: PolicyScopeExclusionsComputers[];

    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsDepartments })
    @Expose({ name: "departments" })
    @Type(() => PolicyScopeExclusionsDepartments)
    departments?: PolicyScopeExclusionsDepartments[];

    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsIbeacons })
    @Expose({ name: "ibeacons" })
    @Type(() => PolicyScopeExclusionsIbeacons)
    ibeacons?: PolicyScopeExclusionsIbeacons[];

    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsNetworkSegments })
    @Expose({ name: "network_segments" })
    @Type(() => PolicyScopeExclusionsNetworkSegments)
    networkSegments?: PolicyScopeExclusionsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => PolicyScopeExclusionsUserGroups)
    userGroups?: PolicyScopeExclusionsUserGroups[];

    @SpeakeasyMetadata({ elemType: PolicyScopeExclusionsUsers })
    @Expose({ name: "users" })
    @Type(() => PolicyScopeExclusionsUsers)
    users?: PolicyScopeExclusionsUsers[];
}

export class PolicyScopeLimitToUsersUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    userGroup?: string;
}

export class PolicyScopeLimitToUsers extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PolicyScopeLimitToUsersUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => PolicyScopeLimitToUsersUserGroups)
    userGroups?: PolicyScopeLimitToUsersUserGroups[];
}

export class PolicyScopeLimitationsIbeacons extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ibeacon" })
    @Type(() => IdName)
    ibeacon?: IdName;
}

export class PolicyScopeLimitationsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(() => IdName)
    networkSegment?: IdName;
}

export class PolicyScopeLimitationsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => IdName)
    userGroup?: IdName;
}

export class PolicyScopeLimitationsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => IdName)
    user?: IdName;
}

export class PolicyScopeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PolicyScopeLimitationsIbeacons })
    @Expose({ name: "ibeacons" })
    @Type(() => PolicyScopeLimitationsIbeacons)
    ibeacons?: PolicyScopeLimitationsIbeacons[];

    @SpeakeasyMetadata({ elemType: PolicyScopeLimitationsNetworkSegments })
    @Expose({ name: "network_segments" })
    @Type(() => PolicyScopeLimitationsNetworkSegments)
    networkSegments?: PolicyScopeLimitationsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: PolicyScopeLimitationsUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => PolicyScopeLimitationsUserGroups)
    userGroups?: PolicyScopeLimitationsUserGroups[];

    @SpeakeasyMetadata({ elemType: PolicyScopeLimitationsUsers })
    @Expose({ name: "users" })
    @Type(() => PolicyScopeLimitationsUsers)
    users?: PolicyScopeLimitationsUsers[];
}

export class PolicyScope extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "all_computers" })
    allComputers?: boolean;

    @SpeakeasyMetadata({ elemType: PolicyScopeBuildings })
    @Expose({ name: "buildings" })
    @Type(() => PolicyScopeBuildings)
    buildings?: PolicyScopeBuildings[];

    @SpeakeasyMetadata({ elemType: PolicyScopeComputerGroups })
    @Expose({ name: "computer_groups" })
    @Type(() => PolicyScopeComputerGroups)
    computerGroups?: PolicyScopeComputerGroups[];

    @SpeakeasyMetadata({ elemType: PolicyScopeComputers })
    @Expose({ name: "computers" })
    @Type(() => PolicyScopeComputers)
    computers?: PolicyScopeComputers[];

    @SpeakeasyMetadata({ elemType: PolicyScopeDepartments })
    @Expose({ name: "departments" })
    @Type(() => PolicyScopeDepartments)
    departments?: PolicyScopeDepartments[];

    @SpeakeasyMetadata()
    @Expose({ name: "exclusions" })
    @Type(() => PolicyScopeExclusions)
    exclusions?: PolicyScopeExclusions;

    @SpeakeasyMetadata()
    @Expose({ name: "limit_to_users" })
    @Type(() => PolicyScopeLimitToUsers)
    limitToUsers?: PolicyScopeLimitToUsers;

    @SpeakeasyMetadata()
    @Expose({ name: "limitations" })
    @Type(() => PolicyScopeLimitations)
    limitations?: PolicyScopeLimitations;
}

export enum PolicyScriptsScriptPriority {
    Before = "Before",
    After = "After",
}

export class PolicyScriptsScript extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter10" })
    parameter10?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter11" })
    parameter11?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter4" })
    parameter4?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter5" })
    parameter5?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter6" })
    parameter6?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter7" })
    parameter7?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter8" })
    parameter8?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "parameter9" })
    parameter9?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "priority" })
    priority?: PolicyScriptsScriptPriority;
}

export class PolicyScripts extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PolicyScriptsScript })
    @Expose({ name: "script" })
    @Type(() => PolicyScriptsScript)
    script?: PolicyScriptsScript[];

    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;
}

export class PolicySelfServiceSelfServiceCategoriesCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "display_in" })
    displayIn?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "feature_in" })
    featureIn?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class PolicySelfServiceSelfServiceCategories extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => PolicySelfServiceSelfServiceCategoriesCategory)
    category?: PolicySelfServiceSelfServiceCategoriesCategory;
}

export class PolicySelfServiceSelfServiceIcon extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "filename" })
    filename?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class PolicySelfService extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "feature_on_main_page" })
    featureOnMainPage?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "force_users_to_view_description" })
    forceUsersToViewDescription?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "install_button_text" })
    installButtonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "re-install_button_text" })
    reInstallButtonText?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_categories" })
    @Type(() => PolicySelfServiceSelfServiceCategories)
    selfServiceCategories?: PolicySelfServiceSelfServiceCategories;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_description" })
    selfServiceDescription?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_display_name" })
    selfServiceDisplayName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_icon" })
    @Type(() => PolicySelfServiceSelfServiceIcon)
    selfServiceIcon?: PolicySelfServiceSelfServiceIcon;

    @SpeakeasyMetadata()
    @Expose({ name: "use_for_self_service" })
    useForSelfService?: boolean;
}

export class PolicyUserInteraction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "allow_deferral_minutes" })
    allowDeferralMinutes?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "allow_deferral_until_utc" })
    allowDeferralUntilUtc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "allow_user_to_defer" })
    allowUserToDefer?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "message_finish" })
    messageFinish?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "message_start" })
    messageStart?: string;
}

/**
 * OK
 */
export class Policy extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "account_maintenance" })
    @Type(() => PolicyAccountMaintenance)
    accountMaintenance?: PolicyAccountMaintenance;

    @SpeakeasyMetadata()
    @Expose({ name: "disk_encryption" })
    @Type(() => PolicyDiskEncryption)
    diskEncryption?: PolicyDiskEncryption;

    @SpeakeasyMetadata({ elemType: PolicyDockItems })
    @Expose({ name: "dock_items" })
    @Type(() => PolicyDockItems)
    dockItems?: PolicyDockItems[];

    @SpeakeasyMetadata()
    @Expose({ name: "files_processes" })
    @Type(() => PolicyFilesProcesses)
    filesProcesses?: PolicyFilesProcesses;

    @SpeakeasyMetadata()
    @Expose({ name: "general" })
    @Type(() => PolicyGeneral)
    general?: PolicyGeneral;

    @SpeakeasyMetadata()
    @Expose({ name: "maintenance" })
    @Type(() => PolicyMaintenance)
    maintenance?: PolicyMaintenance;

    @SpeakeasyMetadata()
    @Expose({ name: "package_configuration" })
    @Type(() => PolicyPackageConfiguration)
    packageConfiguration?: PolicyPackageConfiguration;

    @SpeakeasyMetadata({ elemType: PolicyPrinters })
    @Expose({ name: "printers" })
    @Type(() => PolicyPrinters)
    printers?: PolicyPrinters[];

    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    @Type(() => PolicyScope)
    scope?: PolicyScope;

    @SpeakeasyMetadata()
    @Expose({ name: "scripts" })
    @Type(() => PolicyScripts)
    scripts?: PolicyScripts;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service" })
    @Type(() => PolicySelfService)
    selfService?: PolicySelfService;

    @SpeakeasyMetadata()
    @Expose({ name: "user_interaction" })
    @Type(() => PolicyUserInteraction)
    userInteraction?: PolicyUserInteraction;
}
