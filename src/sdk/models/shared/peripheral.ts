/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Attachment } from "./attachment";
import { Location } from "./location";
import { Purchasing } from "./purchasing";
import { Expose, Type } from "class-transformer";

export class PeripheralAttachments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "attachment" })
    @Type(() => Attachment)
    attachment?: Attachment;
}

export class PeripheralField extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export class PeripheralFields extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "field" })
    @Type(() => PeripheralField)
    field?: PeripheralField;
}

export class PeripheralGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bar_code_1" })
    barCode1?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "bar_code_2" })
    barCode2?: string;

    @SpeakeasyMetadata({ elemType: PeripheralFields })
    @Expose({ name: "fields" })
    @Type(() => PeripheralFields)
    fields?: PeripheralFields[];

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the peripheral type
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: string;
}

export class Peripheral extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: PeripheralAttachments })
    @Expose({ name: "attachments" })
    @Type(() => PeripheralAttachments)
    attachments?: PeripheralAttachments[];

    @SpeakeasyMetadata()
    @Expose({ name: "general" })
    @Type(() => PeripheralGeneral)
    general?: PeripheralGeneral;

    @SpeakeasyMetadata()
    @Expose({ name: "location" })
    @Type(() => Location)
    location?: Location;

    @SpeakeasyMetadata()
    @Expose({ name: "purchasing" })
    @Type(() => Purchasing)
    purchasing?: Purchasing;
}
