/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class Choices extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "choice" })
    choice?: string;
}

export enum PeripheralTypeType {
    Menu = "menu",
    Text = "text",
}

export class Field extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Choices })
    @Expose({ name: "choices" })
    @Type(() => Choices)
    choices?: Choices[];

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "order" })
    order?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: PeripheralTypeType;
}

export class Fields extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "field" })
    @Type(() => Field)
    field?: Field;
}

export class PeripheralType extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Fields })
    @Expose({ name: "fields" })
    @Type(() => Fields)
    fields?: Fields[];

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}
