/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum ComputerExtensionAttributeDataType {
    String = "String",
    Integer = "Integer",
    Date = "Date",
}

export enum ComputerExtensionAttributeInputTypeType {
    Script = "script",
    TextField = "Text Field",
    LDAPMapping = "LDAP Mapping",
    PopUpMenu = "Pop-up Menu",
}

export class ComputerExtensionAttributeInputType extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: ComputerExtensionAttributeInputTypeType;
}

/**
 * Category in which to display the extension attribute in Jamf Pro
 */
export enum ComputerExtensionAttributeInventoryDisplay {
    General = "General",
    Hardware = "Hardware",
    OperatingSystem = "Operating System",
    UserAndLocation = "User and Location",
    Purchasing = "Purchasing",
    ExtensionAttributes = "Extension Attributes",
}

export class ComputerExtensionAttribute extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data_type" })
    dataType?: ComputerExtensionAttributeDataType;

    /**
     * Description of the extension attribute
     */
    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * Only applicable to script input type
     */
    @SpeakeasyMetadata()
    @Expose({ name: "enabled" })
    enabled?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "input_type" })
    @Type(() => ComputerExtensionAttributeInputType)
    inputType?: ComputerExtensionAttributeInputType;

    /**
     * Category in which to display the extension attribute in Jamf Pro
     */
    @SpeakeasyMetadata()
    @Expose({ name: "inventory_display" })
    inventoryDisplay?: ComputerExtensionAttributeInventoryDisplay;

    /**
     * Extension attribute name
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;
}
