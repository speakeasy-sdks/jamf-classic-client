/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CategoryObject } from "./categoryobject";
import { IdName } from "./idname";
import { SiteObject } from "./siteobject";
import { Expose, Type } from "class-transformer";

export class MobileDeviceApplicationAppConfiguration extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "preferences" })
    preferences?: string;
}

export enum MobileDeviceApplicationGeneralDeploymentType {
    MakeAvailableInSelfService = "Make Available in Self Service",
    InstallAutomaticallyPromptUsersToInstall = "Install Automatically/Prompt Users to Install",
}

export class MobileDeviceApplicationGeneralIcon extends SpeakeasyBase {
    /**
     * base64 encoded
     */
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    data?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class MobileDeviceApplicationGeneralIpa extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    data?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class MobileDeviceApplicationGeneral extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bundle_id" })
    bundleId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => CategoryObject)
    category?: CategoryObject;

    @SpeakeasyMetadata()
    @Expose({ name: "deploy_as_managed_app" })
    deployAsManagedApp?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "deploy_automatically" })
    deployAutomatically?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "deployment_type" })
    deploymentType?: MobileDeviceApplicationGeneralDeploymentType;

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "display_name" })
    displayName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "external_url" })
    externalUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "free" })
    free?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "host_externally" })
    hostExternally?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "icon" })
    @Type(() => MobileDeviceApplicationGeneralIcon)
    icon?: MobileDeviceApplicationGeneralIcon;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "internal_app" })
    internalApp?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "ipa" })
    @Type(() => MobileDeviceApplicationGeneralIpa)
    ipa?: MobileDeviceApplicationGeneralIpa;

    @SpeakeasyMetadata()
    @Expose({ name: "itunes_country_region" })
    itunesCountryRegion?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "itunes_store_url" })
    itunesStoreUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "itunes_sync_time" })
    itunesSyncTime?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "keep_description_and_icon_up_to_date" })
    keepDescriptionAndIconUpToDate?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "make_available_after_install" })
    makeAvailableAfterInstall?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "mobile_device_provisioning_profile" })
    mobileDeviceProvisioningProfile?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "prevent_backup_of_app_data" })
    preventBackupOfAppData?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "remove_app_when_mdm_profile_is_removed" })
    removeAppWhenMdmProfileIsRemoved?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "site" })
    @Type(() => SiteObject)
    site?: SiteObject;

    @SpeakeasyMetadata()
    @Expose({ name: "take_over_management" })
    takeOverManagement?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "version" })
    version: string;
}

export class MobileDeviceApplicationScopeBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => IdName)
    building?: IdName;
}

export class MobileDeviceApplicationScopeDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => IdName)
    department?: IdName;
}

export class MobileDeviceApplicationScopeExclusionsBuildings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "building" })
    @Type(() => IdName)
    building?: IdName;
}

export class MobileDeviceApplicationScopeExclusionsDepartments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "department" })
    @Type(() => IdName)
    department?: IdName;
}

export class MobileDeviceApplicationScopeExclusionsJssUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => IdName)
    userGroup?: IdName;
}

export class MobileDeviceApplicationScopeExclusionsJssUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => IdName)
    user?: IdName;
}

export class MobileDeviceApplicationScopeExclusionsMobileDeviceGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "mobile_device_group" })
    @Type(() => IdName)
    mobileDeviceGroup?: IdName;
}

export class MobileDeviceApplicationScopeExclusionsMobileDevicesMobileDevice extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the device
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "wifi_mac_address" })
    wifiMacAddress?: string;
}

export class MobileDeviceApplicationScopeExclusionsMobileDevices extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "mobile_device" })
    @Type(() => MobileDeviceApplicationScopeExclusionsMobileDevicesMobileDevice)
    mobileDevice?: MobileDeviceApplicationScopeExclusionsMobileDevicesMobileDevice;
}

export class MobileDeviceApplicationScopeExclusionsNetworkSegmentsNetworkSegment extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the network segment
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uid" })
    uid?: string;
}

export class MobileDeviceApplicationScopeExclusionsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(() => MobileDeviceApplicationScopeExclusionsNetworkSegmentsNetworkSegment)
    networkSegment?: MobileDeviceApplicationScopeExclusionsNetworkSegmentsNetworkSegment;
}

export class MobileDeviceApplicationScopeExclusionsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => IdName)
    userGroup?: IdName;
}

export class MobileDeviceApplicationScopeExclusionsUsersUser extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class MobileDeviceApplicationScopeExclusionsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => MobileDeviceApplicationScopeExclusionsUsersUser)
    user?: MobileDeviceApplicationScopeExclusionsUsersUser;
}

export class MobileDeviceApplicationScopeExclusions extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsBuildings })
    @Expose({ name: "buildings" })
    @Type(() => MobileDeviceApplicationScopeExclusionsBuildings)
    buildings?: MobileDeviceApplicationScopeExclusionsBuildings[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsDepartments })
    @Expose({ name: "departments" })
    @Type(() => MobileDeviceApplicationScopeExclusionsDepartments)
    departments?: MobileDeviceApplicationScopeExclusionsDepartments[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsJssUserGroups })
    @Expose({ name: "jss_user_groups" })
    @Type(() => MobileDeviceApplicationScopeExclusionsJssUserGroups)
    jssUserGroups?: MobileDeviceApplicationScopeExclusionsJssUserGroups[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsJssUsers })
    @Expose({ name: "jss_users" })
    @Type(() => MobileDeviceApplicationScopeExclusionsJssUsers)
    jssUsers?: MobileDeviceApplicationScopeExclusionsJssUsers[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsMobileDeviceGroups })
    @Expose({ name: "mobile_device_groups" })
    @Type(() => MobileDeviceApplicationScopeExclusionsMobileDeviceGroups)
    mobileDeviceGroups?: MobileDeviceApplicationScopeExclusionsMobileDeviceGroups[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsMobileDevices })
    @Expose({ name: "mobile_devices" })
    @Type(() => MobileDeviceApplicationScopeExclusionsMobileDevices)
    mobileDevices?: MobileDeviceApplicationScopeExclusionsMobileDevices[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsNetworkSegments })
    @Expose({ name: "network_segments" })
    @Type(() => MobileDeviceApplicationScopeExclusionsNetworkSegments)
    networkSegments?: MobileDeviceApplicationScopeExclusionsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => MobileDeviceApplicationScopeExclusionsUserGroups)
    userGroups?: MobileDeviceApplicationScopeExclusionsUserGroups[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeExclusionsUsers })
    @Expose({ name: "users" })
    @Type(() => MobileDeviceApplicationScopeExclusionsUsers)
    users?: MobileDeviceApplicationScopeExclusionsUsers[];
}

export class MobileDeviceApplicationScopeJssUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => IdName)
    userGroup?: IdName;
}

export class MobileDeviceApplicationScopeJssUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => IdName)
    user?: IdName;
}

export class MobileDeviceApplicationScopeLimitationsNetworkSegments extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "network_segment" })
    @Type(() => IdName)
    networkSegment?: IdName;
}

export class MobileDeviceApplicationScopeLimitationsUserGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user_group" })
    @Type(() => IdName)
    userGroup?: IdName;
}

export class MobileDeviceApplicationScopeLimitationsUsers extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => IdName)
    user?: IdName;
}

export class MobileDeviceApplicationScopeLimitations extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeLimitationsNetworkSegments })
    @Expose({ name: "network_segments" })
    @Type(() => MobileDeviceApplicationScopeLimitationsNetworkSegments)
    networkSegments?: MobileDeviceApplicationScopeLimitationsNetworkSegments[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeLimitationsUserGroups })
    @Expose({ name: "user_groups" })
    @Type(() => MobileDeviceApplicationScopeLimitationsUserGroups)
    userGroups?: MobileDeviceApplicationScopeLimitationsUserGroups[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeLimitationsUsers })
    @Expose({ name: "users" })
    @Type(() => MobileDeviceApplicationScopeLimitationsUsers)
    users?: MobileDeviceApplicationScopeLimitationsUsers[];
}

export class MobileDeviceApplicationScopeMobileDeviceGroups extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "mobile_device_group" })
    @Type(() => IdName)
    mobileDeviceGroup?: IdName;
}

export class MobileDeviceApplicationScopeMobileDevicesMobileDevice extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * Name of the device
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "udid" })
    udid?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "wifi_mac_address" })
    wifiMacAddress?: string;
}

export class MobileDeviceApplicationScopeMobileDevices extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "mobile_device" })
    @Type(() => MobileDeviceApplicationScopeMobileDevicesMobileDevice)
    mobileDevice?: MobileDeviceApplicationScopeMobileDevicesMobileDevice;
}

export class MobileDeviceApplicationScope extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "all_jss_users" })
    allJssUsers?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "all_mobile_devices" })
    allMobileDevices?: boolean;

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeBuildings })
    @Expose({ name: "buildings" })
    @Type(() => MobileDeviceApplicationScopeBuildings)
    buildings?: MobileDeviceApplicationScopeBuildings[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeDepartments })
    @Expose({ name: "departments" })
    @Type(() => MobileDeviceApplicationScopeDepartments)
    departments?: MobileDeviceApplicationScopeDepartments[];

    @SpeakeasyMetadata()
    @Expose({ name: "exclusions" })
    @Type(() => MobileDeviceApplicationScopeExclusions)
    exclusions?: MobileDeviceApplicationScopeExclusions;

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeJssUserGroups })
    @Expose({ name: "jss_user_groups" })
    @Type(() => MobileDeviceApplicationScopeJssUserGroups)
    jssUserGroups?: MobileDeviceApplicationScopeJssUserGroups[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeJssUsers })
    @Expose({ name: "jss_users" })
    @Type(() => MobileDeviceApplicationScopeJssUsers)
    jssUsers?: MobileDeviceApplicationScopeJssUsers[];

    @SpeakeasyMetadata()
    @Expose({ name: "limitations" })
    @Type(() => MobileDeviceApplicationScopeLimitations)
    limitations?: MobileDeviceApplicationScopeLimitations;

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeMobileDeviceGroups })
    @Expose({ name: "mobile_device_groups" })
    @Type(() => MobileDeviceApplicationScopeMobileDeviceGroups)
    mobileDeviceGroups?: MobileDeviceApplicationScopeMobileDeviceGroups[];

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationScopeMobileDevices })
    @Expose({ name: "mobile_devices" })
    @Type(() => MobileDeviceApplicationScopeMobileDevices)
    mobileDevices?: MobileDeviceApplicationScopeMobileDevices[];
}

export class MobileDeviceApplicationSelfServiceSelfServiceCategoriesCategory extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "display_in" })
    displayIn?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

export class MobileDeviceApplicationSelfServiceSelfServiceCategories extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    @Type(() => MobileDeviceApplicationSelfServiceSelfServiceCategoriesCategory)
    category?: MobileDeviceApplicationSelfServiceSelfServiceCategoriesCategory;
}

export class MobileDeviceApplicationSelfServiceSelfServiceIcon extends SpeakeasyBase {
    /**
     * base64 encoded
     */
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    data?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "uri" })
    uri?: string;
}

export class MobileDeviceApplicationSelfService extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "feature_on_main_page" })
    featureOnMainPage?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "notification" })
    notification?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "notification_message" })
    notificationMessage?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "notification_subject" })
    notificationSubject?: string;

    @SpeakeasyMetadata({ elemType: MobileDeviceApplicationSelfServiceSelfServiceCategories })
    @Expose({ name: "self_service_categories" })
    @Type(() => MobileDeviceApplicationSelfServiceSelfServiceCategories)
    selfServiceCategories?: MobileDeviceApplicationSelfServiceSelfServiceCategories[];

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_description" })
    selfServiceDescription?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service_icon" })
    @Type(() => MobileDeviceApplicationSelfServiceSelfServiceIcon)
    selfServiceIcon?: MobileDeviceApplicationSelfServiceSelfServiceIcon;
}

export class MobileDeviceApplicationVpp extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "assign_vpp_device_based_licenses" })
    assignVppDeviceBasedLicenses?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "vpp_admin_account_id" })
    vppAdminAccountId?: number;
}

/**
 * OK
 */
export class MobileDeviceApplication extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "app_configuration" })
    @Type(() => MobileDeviceApplicationAppConfiguration)
    appConfiguration?: MobileDeviceApplicationAppConfiguration;

    @SpeakeasyMetadata()
    @Expose({ name: "general" })
    @Type(() => MobileDeviceApplicationGeneral)
    general?: MobileDeviceApplicationGeneral;

    @SpeakeasyMetadata()
    @Expose({ name: "scope" })
    @Type(() => MobileDeviceApplicationScope)
    scope?: MobileDeviceApplicationScope;

    @SpeakeasyMetadata()
    @Expose({ name: "self_service" })
    @Type(() => MobileDeviceApplicationSelfService)
    selfService?: MobileDeviceApplicationSelfService;

    @SpeakeasyMetadata()
    @Expose({ name: "vpp" })
    @Type(() => MobileDeviceApplicationVpp)
    vpp?: MobileDeviceApplicationVpp;
}
